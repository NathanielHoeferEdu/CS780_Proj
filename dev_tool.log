2018-10-27 12:33:40,733 - dev: Number of commits: 433
2018-10-27 12:33:40,758 - dev: Processing commit 1/433: ff0f234e9ebc4c9df24b61d7c03b41e77d581f38 - diff: @@ -1,21 +0,0 @@
+# How to contribute
+
+We definitely welcome patches and contribution to grpc web! Here is some guideline
+and information about how to do so.
+
+## Getting started
+
+### Legal requirements
+
+In order to protect both you and ourselves, you will need to sign the
+[Contributor License Agreement](https://cla.developers.google.com/clas).
+
+### Technical requirements
+
+The basic build script should run to completion.
+
+```sh
+$ ./build.sh
+```
+
+More details to come.

2018-10-27 12:33:40,759 - dev: Feng Li, comments [u'//cla.developers.google.com/clas).']
2018-10-27 12:33:40,824 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:40,851 - dev: Processing following file? False, build.sh
2018-10-27 12:33:40,881 - dev: Processing following file? False, build.sh
2018-10-27 12:33:40,894 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:40,907 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:40,924 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:40,938 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:40,951 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:40,966 - dev: Processing following file? False, Makefile
2018-10-27 12:33:40,979 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:40,996 - dev: Processing following file? False, Makefile
2018-10-27 12:33:41,010 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,023 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,036 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,049 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,065 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,079 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:41,079 - dev: Processing commit 23/433: 0ac6a001770cdfd9d3286436e5d8ce1aa191ad59 - diff: @@ -141,7 +141,7 @@ void NginxHttpFrontend::Start() {
   ngx_int_t rc = ngx_http_read_client_request_body(http_request_,
                                                    continue_read_request_body);
   if (rc >= NGX_HTTP_BAD_REQUEST) {
-    DEBUG("ngx_http_read_client_request_body failed, rc = %ld.", rc);
+    DEBUG("ngx_http_read_client_request_body failed, rc = %" PRIdPTR ".", rc);
     SendErrorToClient(grpc::Status(grpc::StatusCode::INTERNAL,
                                    "Failed to read request body."));
     return;
@@ -174,12 +174,12 @@ void NginxHttpFrontend::ContinueReadRequestBody() {
 
   while (true) {
     ngx_int_t rc = ngx_http_read_unbuffered_request_body(http_request_);
-    DEBUG("ngx_http_read_unbuffered_request_body = %li", rc);
+    DEBUG("ngx_http_read_unbuffered_request_body = %" PRIdPTR ".", rc);
     if (http_request_->request_body->bufs == nullptr) {
       return;
     }
     if (rc == NGX_AGAIN) {
-      DEBUG("request has not been finished yet, request_length = %lli",
+      DEBUG("request has not been finished yet, request_length = %lli.",
             static_cast<long long>(http_request_->request_length));
       bool sent = SendRequestToBackend();
       if (is_response_status_sent_) {
@@ -216,7 +216,7 @@ void NginxHttpFrontend::SendResponseMessageToClient(Response *response) {
   if (response->message() != nullptr) {
     std::vector<Slice> transcoded_message;
     ByteBuffer buffer(response->message()->data(), response->message()->size());
-    DEBUG("Sends response message, size: %li", buffer.Length());
+    DEBUG("Sends response message, size: %" PRIdPTR ".", buffer.Length());
     encoder_->Encode(&buffer, &transcoded_message);
     if (!transcoded_message.empty()) {
       ngx_chain_t *output = ngx_alloc_chain_link(http_request_->pool);

2018-10-27 12:33:41,079 - dev: Feng Li, comments [u'"ngx_http_read_client_request_body failed, rc = %"', u'"."', u'"ngx_http_read_unbuffered_request_body = %"', u'"."', u'"request has not been finished yet, request_length = %lli."', u'"Sends response message, size: %"', u'"."']
2018-10-27 12:33:41,093 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:41,093 - dev: Processing commit 24/433: d6336b404825dedae765a96661ef6340090d922e - diff: @@ -141,7 +141,7 @@ void NginxHttpFrontend::Start() {
   ngx_int_t rc = ngx_http_read_client_request_body(http_request_,
                                                    continue_read_request_body);
   if (rc >= NGX_HTTP_BAD_REQUEST) {
-    DEBUG("ngx_http_read_client_request_body failed, rc = %ld.", rc);
+    DEBUG("ngx_http_read_client_request_body failed, rc = %" PRIdPTR ".", rc);
     SendErrorToClient(grpc::Status(grpc::StatusCode::INTERNAL,
                                    "Failed to read request body."));
     return;
@@ -174,12 +174,12 @@ void NginxHttpFrontend::ContinueReadRequestBody() {
 
   while (true) {
     ngx_int_t rc = ngx_http_read_unbuffered_request_body(http_request_);
-    DEBUG("ngx_http_read_unbuffered_request_body = %li", rc);
+    DEBUG("ngx_http_read_unbuffered_request_body = %" PRIdPTR ".", rc);
     if (http_request_->request_body->bufs == nullptr) {
       return;
     }
     if (rc == NGX_AGAIN) {
-      DEBUG("request has not been finished yet, request_length = %lli",
+      DEBUG("request has not been finished yet, request_length = %lli.",
             static_cast<long long>(http_request_->request_length));
       bool sent = SendRequestToBackend();
       if (is_response_status_sent_) {
@@ -216,7 +216,7 @@ void NginxHttpFrontend::SendResponseMessageToClient(Response *response) {
   if (response->message() != nullptr) {
     std::vector<Slice> transcoded_message;
     ByteBuffer buffer(response->message()->data(), response->message()->size());
-    DEBUG("Sends response message, size: %li", buffer.Length());
+    DEBUG("Sends response message, size: %" PRIdPTR ".", buffer.Length());
     encoder_->Encode(&buffer, &transcoded_message);
     if (!transcoded_message.empty()) {
       ngx_chain_t *output = ngx_alloc_chain_link(http_request_->pool);

2018-10-27 12:33:41,093 - dev: Feng Li, comments [u'"ngx_http_read_client_request_body failed, rc = %"', u'"."', u'"ngx_http_read_unbuffered_request_body = %"', u'"."', u'"request has not been finished yet, request_length = %lli."', u'"Sends response message, size: %"', u'"."']
2018-10-27 12:33:41,107 - dev: Processing following file? False, Makefile
2018-10-27 12:33:41,124 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,138 - dev: Processing following file? False, .gitmodules
2018-10-27 12:33:41,153 - dev: Processing following file? False, .gitmodules
2018-10-27 12:33:41,167 - dev: Processing following file? True, net/grpc/gateway/codec/base64.cc
2018-10-27 12:33:41,167 - dev: Processing commit 29/433: 331fd423cf27a3e236a060001d480ce4aca93d75 - diff: @@ -68,62 +68,83 @@ std::unique_ptr<Slice> Base64::Encode(const Slice& input_slice, uint8_t* buffer,
 
   gpr_slice output_slice = gpr_slice_malloc(encoded_size);
   uint8_t* output = GPR_SLICE_START_PTR(output_slice);
-
-  // Encodes the first group, together with the buffer.
   const uint8_t* input = input_slice.begin();
-  if (*buffer_length == 1) {
-    *output++ = b64_chars[(buffer[0] >> 2) & 0x3F];
-    *output++ = b64_chars[((buffer[0] & 0x03) << 4) | (((*input) >> 4) & 0x0F)];
-    *output++ =
-        b64_chars[(((*input) & 0x0F) << 2) | ((*(input + 1) >> 6) & 0x03)];
-    *output++ = b64_chars[*(input + 1) & 0x3F];
-    input += 2;
-  } else if (*buffer_length == 2) {
-    *output++ = b64_chars[(buffer[0] >> 2) & 0x3F];
-    *output++ =
-        b64_chars[((buffer[0] & 0x03) << 4) | ((buffer[1] >> 4) & 0x0F)];
-    *output++ = b64_chars[((buffer[1] & 0x0F) << 2) | (((*input) >> 6) & 0x03)];
-    *output++ = b64_chars[(*input) & 0x3F];
-    input += 1;
-  }
 
-  // Encodes the other groups, besides the tail.
-  while (input < input_slice.end() - tail_size) {
-    *output++ = b64_chars[((*input) >> 2) & 0x3F];
-    *output++ =
-        b64_chars[(((*input) & 0x03) << 4) | ((*(input + 1) >> 4) & 0x0F)];
-    *output++ =
-        b64_chars[((*(input + 1) & 0x0F) << 2) | ((*(input + 2) >> 6) & 0x03)];
-    *output++ = b64_chars[*(input + 2) & 0x3F];
-    input += 3;
-  }
-
-  // Encodes the tail group if current slice is the last one.
-  if (tail_size > 0) {
-    if (is_last) {
-      if (tail_size == 2) {
-        *output++ = b64_chars[((*input) >> 2) & 0x3F];
-        *output++ =
-            b64_chars[(((*input) & 0x03) << 4) | ((*(input + 1) >> 4) & 0x0F)];
-        *output++ = b64_chars[(*(input + 1) & 0x0F) << 2];
-        *output++ = kPad;
-      } else if (tail_size == 1) {
-        *output++ = b64_chars[(*input >> 2) & 0x3F];
-        *output++ = b64_chars[(*input & 0x03) << 4];
-        *output++ = kPad;
-        *output++ = kPad;
-      }
-      *buffer_length = 0;
+  // trailers only.
+  if (data_size == 1) {
+    if (*buffer_length == 0) {
+      Encode1CharGroup(*input, output);
     } else {
-      memcpy(buffer, input, tail_size);
-      *buffer_length = tail_size;
+      Encode1CharGroup(buffer[0], output);
+    }
+    *buffer_length = 0;
+  } else if (data_size == 2) {
+    if (*buffer_length == 0) {
+      Encode2CharGroup(*input, *(input + 1), output);
+    } else if (*buffer_length == 1) {
+      Encode2CharGroup(buffer[0], *input, output);
+    } else if (*buffer_length == 2) {
+      Encode2CharGroup(buffer[0], buffer[1], output);
     }
-  } else {
     *buffer_length = 0;
+  } else if (data_size > 2) {
+    // Encodes the first group, together with the buffer.
+    if (*buffer_length == 1) {
+      Encode3CharGroup(buffer[0], *input, *(input + 1), output);
+      output += 4;
+      input += 2;
+    } else if (*buffer_length == 2) {
+      Encode3CharGroup(buffer[0], buffer[1], *input, output);
+      output += 4;
+      input += 1;
+    }
+    // Encodes the other groups, besides the tail.
+    while (input < input_slice.end() - tail_size) {
+      Encode3CharGroup(*input, *(input + 1), *(input + 2), output);
+      output += 4;
+      input += 3;
+    }
+    // Encodes the tail group if current slice is the last one.
+    if (tail_size > 0) {
+      if (is_last) {
+        if (tail_size == 2) {
+          Encode2CharGroup(*input, *(input + 1), output);
+        } else if (tail_size == 1) {
+          Encode1CharGroup(*input, output);
+        }
+        *buffer_length = 0;
+      } else {
+        memcpy(buffer, input, tail_size);
+        *buffer_length = tail_size;
+      }
+    } else {
+      *buffer_length = 0;
+    }
   }
   return std::unique_ptr<Slice>(new Slice(output_slice, Slice::STEAL_REF));
 }
 
+void Base64::Encode1CharGroup(uint8_t input_0, uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[(input_0 & 0x03) << 4];
+  *output++ = kPad;
+  *output++ = kPad;
+}
+void Base64::Encode2CharGroup(uint8_t input_0, uint8_t input_1,
+                              uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[((input_0 & 0x03) << 4) | ((input_1 >> 4) & 0x0F)];
+  *output++ = b64_chars[(input_1 & 0x0F) << 2];
+  *output++ = kPad;
+}
+void Base64::Encode3CharGroup(uint8_t input_0, uint8_t input_1, uint8_t input_2,
+                              uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[((input_0 & 0x03) << 4) | ((input_1 >> 4) & 0x0F)];
+  *output++ = b64_chars[((input_1 & 0x0F) << 2) | ((input_2 >> 6) & 0x03)];
+  *output++ = b64_chars[input_2 & 0x3F];
+}
+
 bool Base64::Encode(const std::vector<Slice>& input,
                     std::vector<Slice>* output) {
   uint8_t buffer[2] = {0};

2018-10-27 12:33:41,167 - dev: Feng Li, comments [u'// trailers only.', u'// Encodes the first group, together with the buffer.', u'// Encodes the other groups, besides the tail.', u'// Encodes the tail group if current slice is the last one.']
2018-10-27 12:33:41,181 - dev: Processing following file? True, net/grpc/gateway/codec/base64.cc
2018-10-27 12:33:41,182 - dev: Processing commit 30/433: 8713115ec2c72c077a0b0198b29d2492285f5335 - diff: @@ -68,62 +68,83 @@ std::unique_ptr<Slice> Base64::Encode(const Slice& input_slice, uint8_t* buffer,
 
   gpr_slice output_slice = gpr_slice_malloc(encoded_size);
   uint8_t* output = GPR_SLICE_START_PTR(output_slice);
-
-  // Encodes the first group, together with the buffer.
   const uint8_t* input = input_slice.begin();
-  if (*buffer_length == 1) {
-    *output++ = b64_chars[(buffer[0] >> 2) & 0x3F];
-    *output++ = b64_chars[((buffer[0] & 0x03) << 4) | (((*input) >> 4) & 0x0F)];
-    *output++ =
-        b64_chars[(((*input) & 0x0F) << 2) | ((*(input + 1) >> 6) & 0x03)];
-    *output++ = b64_chars[*(input + 1) & 0x3F];
-    input += 2;
-  } else if (*buffer_length == 2) {
-    *output++ = b64_chars[(buffer[0] >> 2) & 0x3F];
-    *output++ =
-        b64_chars[((buffer[0] & 0x03) << 4) | ((buffer[1] >> 4) & 0x0F)];
-    *output++ = b64_chars[((buffer[1] & 0x0F) << 2) | (((*input) >> 6) & 0x03)];
-    *output++ = b64_chars[(*input) & 0x3F];
-    input += 1;
-  }
 
-  // Encodes the other groups, besides the tail.
-  while (input < input_slice.end() - tail_size) {
-    *output++ = b64_chars[((*input) >> 2) & 0x3F];
-    *output++ =
-        b64_chars[(((*input) & 0x03) << 4) | ((*(input + 1) >> 4) & 0x0F)];
-    *output++ =
-        b64_chars[((*(input + 1) & 0x0F) << 2) | ((*(input + 2) >> 6) & 0x03)];
-    *output++ = b64_chars[*(input + 2) & 0x3F];
-    input += 3;
-  }
-
-  // Encodes the tail group if current slice is the last one.
-  if (tail_size > 0) {
-    if (is_last) {
-      if (tail_size == 2) {
-        *output++ = b64_chars[((*input) >> 2) & 0x3F];
-        *output++ =
-            b64_chars[(((*input) & 0x03) << 4) | ((*(input + 1) >> 4) & 0x0F)];
-        *output++ = b64_chars[(*(input + 1) & 0x0F) << 2];
-        *output++ = kPad;
-      } else if (tail_size == 1) {
-        *output++ = b64_chars[(*input >> 2) & 0x3F];
-        *output++ = b64_chars[(*input & 0x03) << 4];
-        *output++ = kPad;
-        *output++ = kPad;
-      }
-      *buffer_length = 0;
+  // trailers only.
+  if (data_size == 1) {
+    if (*buffer_length == 0) {
+      Encode1CharGroup(*input, output);
     } else {
-      memcpy(buffer, input, tail_size);
-      *buffer_length = tail_size;
+      Encode1CharGroup(buffer[0], output);
+    }
+    *buffer_length = 0;
+  } else if (data_size == 2) {
+    if (*buffer_length == 0) {
+      Encode2CharGroup(*input, *(input + 1), output);
+    } else if (*buffer_length == 1) {
+      Encode2CharGroup(buffer[0], *input, output);
+    } else if (*buffer_length == 2) {
+      Encode2CharGroup(buffer[0], buffer[1], output);
     }
-  } else {
     *buffer_length = 0;
+  } else if (data_size > 2) {
+    // Encodes the first group, together with the buffer.
+    if (*buffer_length == 1) {
+      Encode3CharGroup(buffer[0], *input, *(input + 1), output);
+      output += 4;
+      input += 2;
+    } else if (*buffer_length == 2) {
+      Encode3CharGroup(buffer[0], buffer[1], *input, output);
+      output += 4;
+      input += 1;
+    }
+    // Encodes the other groups, besides the tail.
+    while (input < input_slice.end() - tail_size) {
+      Encode3CharGroup(*input, *(input + 1), *(input + 2), output);
+      output += 4;
+      input += 3;
+    }
+    // Encodes the tail group if current slice is the last one.
+    if (tail_size > 0) {
+      if (is_last) {
+        if (tail_size == 2) {
+          Encode2CharGroup(*input, *(input + 1), output);
+        } else if (tail_size == 1) {
+          Encode1CharGroup(*input, output);
+        }
+        *buffer_length = 0;
+      } else {
+        memcpy(buffer, input, tail_size);
+        *buffer_length = tail_size;
+      }
+    } else {
+      *buffer_length = 0;
+    }
   }
   return std::unique_ptr<Slice>(new Slice(output_slice, Slice::STEAL_REF));
 }
 
+void Base64::Encode1CharGroup(uint8_t input_0, uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[(input_0 & 0x03) << 4];
+  *output++ = kPad;
+  *output++ = kPad;
+}
+void Base64::Encode2CharGroup(uint8_t input_0, uint8_t input_1,
+                              uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[((input_0 & 0x03) << 4) | ((input_1 >> 4) & 0x0F)];
+  *output++ = b64_chars[(input_1 & 0x0F) << 2];
+  *output++ = kPad;
+}
+void Base64::Encode3CharGroup(uint8_t input_0, uint8_t input_1, uint8_t input_2,
+                              uint8_t* output) {
+  *output++ = b64_chars[(input_0 >> 2) & 0x3F];
+  *output++ = b64_chars[((input_0 & 0x03) << 4) | ((input_1 >> 4) & 0x0F)];
+  *output++ = b64_chars[((input_1 & 0x0F) << 2) | ((input_2 >> 6) & 0x03)];
+  *output++ = b64_chars[input_2 & 0x3F];
+}
+
 bool Base64::Encode(const std::vector<Slice>& input,
                     std::vector<Slice>* output) {
   uint8_t buffer[2] = {0};

2018-10-27 12:33:41,182 - dev: Feng Li, comments [u'// trailers only.', u'// Encodes the first group, together with the buffer.', u'// Encodes the other groups, besides the tail.', u'// Encodes the tail group if current slice is the last one.']
2018-10-27 12:33:41,197 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,211 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,224 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,238 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,251 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,267 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,281 - dev: Processing following file? False, net/grpc/gateway/nginx/package/nginx.conf
2018-10-27 12:33:41,294 - dev: Processing following file? False, net/grpc/gateway/nginx/package/nginx.conf
2018-10-27 12:33:41,308 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:41,324 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:41,339 - dev: Processing following file? False, javascript/net/grpc/web/clientbase.js
2018-10-27 12:33:41,354 - dev: Processing following file? False, javascript/net/grpc/web/clientbase.js
2018-10-27 12:33:41,367 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:41,381 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:41,396 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:41,410 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:41,423 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:41,436 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:41,450 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:41,451 - dev: Processing commit 49/433: db337907525cb861fb33872722849f121bf56a1a - diff: @@ -1,4 +1,4 @@
-/*
+/**
  *
  * Copyright 2016, Google Inc.
  * All rights reserved.
@@ -52,13 +52,15 @@ namespace grpc {
 namespace web {
 namespace {
 
+using std::string;
+
 enum Mode {
   OP = 0,       // first party google3 one platform services
   GATEWAY = 1,  // open-source gRPC Gateway, currently nginx
   OPJSPB = 2,   // first party google3 one platform services with JSPB
 };
 
-std::string GetMode(const Mode mode) {
+string GetModeVar(const Mode mode) {
   switch (mode) {
     case OP:
       return "OP";
@@ -69,11 +71,17 @@ std::string GetMode(const Mode mode) {
   }
 }
 
+string GetDeserializeMethodName(const string& mode_var) {
+  if (mode_var == GetModeVar(Mode::OPJSPB)) {
+    return "deserialize";
+  }
+  return "deserializeBinary";
+}
+
 /* Finds all message types used in all services in the file, and returns them
  * as a map of fully qualified message type name to message descriptor */
-std::map<std::string, const Descriptor *> GetAllMessages(
-    const FileDescriptor *file) {
-  std::map<std::string, const Descriptor *> message_types;
+std::map<string, const Descriptor*> GetAllMessages(const FileDescriptor* file) {
+  std::map<string, const Descriptor*> message_types;
   for (int service_index = 0;
        service_index < file->service_count();
        ++service_index) {
@@ -93,10 +101,9 @@ std::map<std::string, const Descriptor *> GetAllMessages(
 }
 
 void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
-  std::map<std::string, const Descriptor *> messages = GetAllMessages(file);
-  std::map<std::string, std::string> vars;
-  for (std::map<std::string, const Descriptor *>::iterator it =
-           messages.begin();
+  std::map<string, const Descriptor*> messages = GetAllMessages(file);
+  std::map<string, string> vars;
+  for (std::map<string, const Descriptor*>::iterator it = messages.begin();
        it != messages.end(); it++) {
     vars["full_name"] = it->first;
     printer->Print(
@@ -106,9 +113,7 @@ void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
   printer->Print("\n\n\n");
 }
 
-
-void PrintFileHeader(Printer* printer,
-                     std::map<std::string, std::string> vars) {
+void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -120,7 +125,7 @@ void PrintFileHeader(Printer* printer,
 }
 
 void PrintServiceConstructor(Printer* printer,
-                             std::map<std::string, std::string> vars) {
+                             const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -148,8 +153,7 @@ void PrintServiceConstructor(Printer* printer,
       "  };\n\n");
 }
 
-void PrintUnaryCall(Printer* printer,
-                    std::map<std::string, std::string> vars) {
+void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -165,32 +169,22 @@ void PrintUnaryCall(Printer* printer,
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
-  printer->Print(
-      vars,
-      "function(request, metadata, callback) {\n");
-  if (vars["mode"] == GetMode(Mode::OP) ||
-      vars["mode"] == GetMode(Mode::OPJSPB)) {
-    printer->Print(
-        vars,
-        "var call = this.client_.rpcCall(this.hostname_ +\n"
-        "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+  printer->Print(vars,
+                 "function(request, metadata, callback) {\n"
+                 "var call = this.client_.rpcCall(this.hostname_ +\n");
+  if (vars["mode"] == GetModeVar(Mode::OP) ||
+      vars["mode"] == GetModeVar(Mode::OPJSPB)) {
+    printer->Print(vars,
+                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(
-        vars,
-        "var call = this.client_.rpcCall(this.hostname_ +\n"
-        "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
   }
+
   printer->Indent();
   printer->Print(vars, "request,\n" "metadata,\n");
 
-  std::string deserializeFunc;
-  if (vars["mode"] == GetMode(Mode::OP) ||
-      vars["mode"] == GetMode(Mode::GATEWAY)) {
-    deserializeFunc = "deserializeBinary";
-  } else {
-    deserializeFunc = "deserialize";
-  }
-  printer->Print(vars, ("proto.$out$." + deserializeFunc + ",\n").c_str());
+  string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ",\n").c_str());
   printer->Print("callback);\n");
 
   printer->Outdent();
@@ -199,8 +193,7 @@ void PrintUnaryCall(Printer* printer,
   printer->Print("};\n\n\n");
 }
 
-void PrintServerStreamingCall(Printer* printer,
-                              std::map<std::string, std::string> vars) {
+void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -214,15 +207,24 @@ void PrintServerStreamingCall(Printer* printer,
   printer->Indent();
   printer->Print(
       "function(request, metadata) {\n"
-      "var stream = this.client_.serverStreaming(\n");
+      "var stream = this.client_.serverStreaming(this.hostname_ +\n");
   printer->Indent();
-  printer->Print(
-      vars,
-      "this.hostname_ +\n"
-      "  '/$package$.$service_name$/$method_name$',\n"
-      "request,\n"
-      "metadata,\n"
-      "proto.$out$.deserializeBinary);\n\n");
+  if (vars["mode"] == GetModeVar(Mode::OP) ||
+      vars["mode"] == GetModeVar(Mode::OPJSPB)) {
+    printer->Print(vars,
+                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+  } else {
+    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+  }
+
+  printer->Indent();
+  printer->Print(vars,
+                 "request,\n"
+                 "metadata,\n");
+
+  string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n\n").c_str());
+
   printer->Outdent();
   printer->Print("return stream;\n");
   printer->Outdent();
@@ -234,20 +236,18 @@ class GrpcCodeGenerator : public CodeGenerator {
   GrpcCodeGenerator() {}
   ~GrpcCodeGenerator() override {}
 
-  bool Generate(const FileDescriptor* file,
-                const std::string& parameter,
-                GeneratorContext* context,
-                std::string* error) const {
+  bool Generate(const FileDescriptor* file, const string& parameter,
+                GeneratorContext* context, string* error) const override {
     if (!file->service_count()) {
       // No services, nothing to do.
       return true;
     }
 
-    std::vector<std::pair<std::string, std::string> > options;
+    std::vector<std::pair<string, string> > options;
     ParseGeneratorParameter(parameter, &options);
 
-    std::string file_name;
-    std::string mode;
+    string file_name;
+    string mode;
     for (int i = 0; i < options.size(); ++i) {
       if (options[i].first == "out") {
         file_name = options[i].second;
@@ -267,14 +267,14 @@ class GrpcCodeGenerator : public CodeGenerator {
       return false;
     }
 
-    std::map<std::string, std::string> vars;
+    std::map<string, string> vars;
     vars["package"] = file->package();
     if (mode == "binary") {
-      vars["mode"] = GetMode(Mode::OP);
+      vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
-      vars["mode"] = GetMode(Mode::GATEWAY);
+      vars["mode"] = GetModeVar(Mode::GATEWAY);
     } else if (mode == "jspb") {
-      vars["mode"] = GetMode(Mode::OPJSPB);
+      vars["mode"] = GetModeVar(Mode::OPJSPB);
     } else {
       *error = "options: invalid mode - " + mode;
       return false;
@@ -315,7 +315,7 @@ class GrpcCodeGenerator : public CodeGenerator {
         // Client streaming is not supported yet
         if (!method->client_streaming()) {
           if (method->server_streaming()) {
-            if (mode == "base64") {
+            if (mode == "base64" || mode == "jspb") {
               PrintServerStreamingCall(&printer, vars);
             }
           } else {

2018-10-27 12:33:41,451 - dev: Stanley Cheung, comments [u'"deserialize"', u'"deserializeBinary"', u'"function(request, metadata, callback) {\\n"', u'"var call = this.client_.rpcCall(this.hostname_ +\\n"', u'"mode"', u'"mode"', u'"  \'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"  \'/$package$.$service_name$/$method_name$\',\\n"', u'"mode"', u'"proto.$out$."', u'",\\n"', u'"var stream = this.client_.serverStreaming(this.hostname_ +\\n"', u'"mode"', u'"mode"', u'"  \'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"  \'/$package$.$service_name$/$method_name$\',\\n"', u'"request,\\n"', u'"metadata,\\n"', u'"mode"', u'"proto.$out$."', u'");\\n\\n"', u'"mode"', u'"mode"', u'"mode"', u'"base64"', u'"jspb"']
2018-10-27 12:33:41,468 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:41,468 - dev: Processing commit 50/433: 343a3ab39f264f551965e2b16164759b82a3a71e - diff: @@ -1,4 +1,4 @@
-/*
+/**
  *
  * Copyright 2016, Google Inc.
  * All rights reserved.
@@ -52,13 +52,15 @@ namespace grpc {
 namespace web {
 namespace {
 
+using std::string;
+
 enum Mode {
   OP = 0,       // first party google3 one platform services
   GATEWAY = 1,  // open-source gRPC Gateway, currently nginx
   OPJSPB = 2,   // first party google3 one platform services with JSPB
 };
 
-std::string GetMode(const Mode mode) {
+string GetModeVar(const Mode mode) {
   switch (mode) {
     case OP:
       return "OP";
@@ -69,11 +71,17 @@ std::string GetMode(const Mode mode) {
   }
 }
 
+string GetDeserializeMethodName(const string& mode_var) {
+  if (mode_var == GetModeVar(Mode::OPJSPB)) {
+    return "deserialize";
+  }
+  return "deserializeBinary";
+}
+
 /* Finds all message types used in all services in the file, and returns them
  * as a map of fully qualified message type name to message descriptor */
-std::map<std::string, const Descriptor *> GetAllMessages(
-    const FileDescriptor *file) {
-  std::map<std::string, const Descriptor *> message_types;
+std::map<string, const Descriptor*> GetAllMessages(const FileDescriptor* file) {
+  std::map<string, const Descriptor*> message_types;
   for (int service_index = 0;
        service_index < file->service_count();
        ++service_index) {
@@ -93,10 +101,9 @@ std::map<std::string, const Descriptor *> GetAllMessages(
 }
 
 void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
-  std::map<std::string, const Descriptor *> messages = GetAllMessages(file);
-  std::map<std::string, std::string> vars;
-  for (std::map<std::string, const Descriptor *>::iterator it =
-           messages.begin();
+  std::map<string, const Descriptor*> messages = GetAllMessages(file);
+  std::map<string, string> vars;
+  for (std::map<string, const Descriptor*>::iterator it = messages.begin();
        it != messages.end(); it++) {
     vars["full_name"] = it->first;
     printer->Print(
@@ -106,9 +113,7 @@ void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
   printer->Print("\n\n\n");
 }
 
-
-void PrintFileHeader(Printer* printer,
-                     std::map<std::string, std::string> vars) {
+void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -120,7 +125,7 @@ void PrintFileHeader(Printer* printer,
 }
 
 void PrintServiceConstructor(Printer* printer,
-                             std::map<std::string, std::string> vars) {
+                             const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -148,8 +153,7 @@ void PrintServiceConstructor(Printer* printer,
       "  };\n\n");
 }
 
-void PrintUnaryCall(Printer* printer,
-                    std::map<std::string, std::string> vars) {
+void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -165,32 +169,22 @@ void PrintUnaryCall(Printer* printer,
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
-  printer->Print(
-      vars,
-      "function(request, metadata, callback) {\n");
-  if (vars["mode"] == GetMode(Mode::OP) ||
-      vars["mode"] == GetMode(Mode::OPJSPB)) {
-    printer->Print(
-        vars,
-        "var call = this.client_.rpcCall(this.hostname_ +\n"
-        "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+  printer->Print(vars,
+                 "function(request, metadata, callback) {\n"
+                 "var call = this.client_.rpcCall(this.hostname_ +\n");
+  if (vars["mode"] == GetModeVar(Mode::OP) ||
+      vars["mode"] == GetModeVar(Mode::OPJSPB)) {
+    printer->Print(vars,
+                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(
-        vars,
-        "var call = this.client_.rpcCall(this.hostname_ +\n"
-        "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
   }
+
   printer->Indent();
   printer->Print(vars, "request,\n" "metadata,\n");
 
-  std::string deserializeFunc;
-  if (vars["mode"] == GetMode(Mode::OP) ||
-      vars["mode"] == GetMode(Mode::GATEWAY)) {
-    deserializeFunc = "deserializeBinary";
-  } else {
-    deserializeFunc = "deserialize";
-  }
-  printer->Print(vars, ("proto.$out$." + deserializeFunc + ",\n").c_str());
+  string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ",\n").c_str());
   printer->Print("callback);\n");
 
   printer->Outdent();
@@ -199,8 +193,7 @@ void PrintUnaryCall(Printer* printer,
   printer->Print("};\n\n\n");
 }
 
-void PrintServerStreamingCall(Printer* printer,
-                              std::map<std::string, std::string> vars) {
+void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -214,15 +207,24 @@ void PrintServerStreamingCall(Printer* printer,
   printer->Indent();
   printer->Print(
       "function(request, metadata) {\n"
-      "var stream = this.client_.serverStreaming(\n");
+      "var stream = this.client_.serverStreaming(this.hostname_ +\n");
   printer->Indent();
-  printer->Print(
-      vars,
-      "this.hostname_ +\n"
-      "  '/$package$.$service_name$/$method_name$',\n"
-      "request,\n"
-      "metadata,\n"
-      "proto.$out$.deserializeBinary);\n\n");
+  if (vars["mode"] == GetModeVar(Mode::OP) ||
+      vars["mode"] == GetModeVar(Mode::OPJSPB)) {
+    printer->Print(vars,
+                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+  } else {
+    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+  }
+
+  printer->Indent();
+  printer->Print(vars,
+                 "request,\n"
+                 "metadata,\n");
+
+  string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n\n").c_str());
+
   printer->Outdent();
   printer->Print("return stream;\n");
   printer->Outdent();
@@ -234,20 +236,18 @@ class GrpcCodeGenerator : public CodeGenerator {
   GrpcCodeGenerator() {}
   ~GrpcCodeGenerator() override {}
 
-  bool Generate(const FileDescriptor* file,
-                const std::string& parameter,
-                GeneratorContext* context,
-                std::string* error) const {
+  bool Generate(const FileDescriptor* file, const string& parameter,
+                GeneratorContext* context, string* error) const override {
     if (!file->service_count()) {
       // No services, nothing to do.
       return true;
     }
 
-    std::vector<std::pair<std::string, std::string> > options;
+    std::vector<std::pair<string, string> > options;
     ParseGeneratorParameter(parameter, &options);
 
-    std::string file_name;
-    std::string mode;
+    string file_name;
+    string mode;
     for (int i = 0; i < options.size(); ++i) {
       if (options[i].first == "out") {
         file_name = options[i].second;
@@ -267,14 +267,14 @@ class GrpcCodeGenerator : public CodeGenerator {
       return false;
     }
 
-    std::map<std::string, std::string> vars;
+    std::map<string, string> vars;
     vars["package"] = file->package();
     if (mode == "binary") {
-      vars["mode"] = GetMode(Mode::OP);
+      vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
-      vars["mode"] = GetMode(Mode::GATEWAY);
+      vars["mode"] = GetModeVar(Mode::GATEWAY);
     } else if (mode == "jspb") {
-      vars["mode"] = GetMode(Mode::OPJSPB);
+      vars["mode"] = GetModeVar(Mode::OPJSPB);
     } else {
       *error = "options: invalid mode - " + mode;
       return false;
@@ -315,7 +315,7 @@ class GrpcCodeGenerator : public CodeGenerator {
         // Client streaming is not supported yet
         if (!method->client_streaming()) {
           if (method->server_streaming()) {
-            if (mode == "base64") {
+            if (mode == "base64" || mode == "jspb") {
               PrintServerStreamingCall(&printer, vars);
             }
           } else {

2018-10-27 12:33:41,469 - dev: Stanley Cheung, comments [u'"deserialize"', u'"deserializeBinary"', u'"function(request, metadata, callback) {\\n"', u'"var call = this.client_.rpcCall(this.hostname_ +\\n"', u'"mode"', u'"mode"', u'"  \'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"  \'/$package$.$service_name$/$method_name$\',\\n"', u'"mode"', u'"proto.$out$."', u'",\\n"', u'"var stream = this.client_.serverStreaming(this.hostname_ +\\n"', u'"mode"', u'"mode"', u'"  \'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"  \'/$package$.$service_name$/$method_name$\',\\n"', u'"request,\\n"', u'"metadata,\\n"', u'"mode"', u'"proto.$out$."', u'");\\n\\n"', u'"mode"', u'"mode"', u'"mode"', u'"base64"', u'"jspb"']
2018-10-27 12:33:41,482 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:41,496 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:41,510 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,528 - dev: Processing following file? False, README.md
2018-10-27 12:33:41,544 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:41,558 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase.js
2018-10-27 12:33:41,574 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:41,590 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase.js
2018-10-27 12:33:41,604 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:41,617 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:41,630 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:41,631 - dev: Processing commit 61/433: ff315317644f10a9ce37c1f565309da58b7198ce - diff: @@ -132,28 +132,32 @@ void PrintServiceConstructor(Printer* printer,
   printer->Print(
       vars,
       "/**\n"
-      "* @constructor\n"
-      "*/\n"
+      " * @param {string} hostname\n"
+      " * @param {?Object} credentials\n"
+      " * @constructor\n"
+      " * @struct\n"
+      " * @final\n"
+      " */\n"
       "proto.$package$.$service_name$Client =\n"
-      "  function(hostname, credentials, options) {\n"
-      "    /**\n"
-      "     * @private {!grpc.web.$mode$ClientBase} the client\n"
-      "     */\n"
-      "    this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
-      "    /**\n"
-      "     * @private {!string} the hostname\n"
-      "     */\n"
-      "    this.hostname_ = hostname;\n\n\n"
-      "    /**\n"
-      "     * @private {?Object} the credentials to be used to connect\n"
-      "     *    to the server\n"
-      "     */\n"
-      "    this.credentials_ = credentials;\n\n"
-      "    /**\n"
-      "     * @private {?Object} options for the client\n"
-      "     */\n"
-      "    this.options_ = options;\n"
-      "  };\n\n");
+      "    function(hostname, credentials, options) {\n"
+      "  /**\n"
+      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
+      "   */\n"
+      "  this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
+      "  /**\n"
+      "   * @private @const {string} The hostname\n"
+      "   */\n"
+      "  this.hostname_ = hostname;\n\n"
+      "  /**\n"
+      "   * @private @const {?Object} The credentials to be used to connect\n"
+      "   *    to the server\n"
+      "   */\n"
+      "  this.credentials_ = credentials;\n\n"
+      "  /**\n"
+      "   * @private @const {?Object} Options for the client\n"
+      "   */\n"
+      "  this.options_ = options;\n"
+      "};\n\n");
 }
 
 void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
@@ -161,29 +165,30 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
       vars,
       "/**\n"
       " * @param {!proto.$in$} request The\n"
-      " *    request proto\n"
+      " *     request proto\n"
       " * @param {!Object<string, string>} metadata User defined\n"
-      " *    call metadata\n"
+      " *     call metadata\n"
       " * @param {function(?string, ?Object=)} callback "
       "The callback\n"
-      " *    function(error, response)\n"
+      " *     function(error, response)\n"
       " * @return {!grpc.web.ClientReadableStream|undefined} The XHR Node\n"
-      " *   Readable Stream\n"
+      " *     Readable Stream\n"
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
   printer->Print(vars,
-                 "function(request, metadata, callback) {\n"
-                 "var call = this.client_.rpcCall(this.hostname_ +\n");
+                 "  function(request, metadata, callback) {\n"
+                 "return this.client_.rpcCall(this.hostname_ +\n");
+  printer->Indent();
+  printer->Indent();
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
   }
 
-  printer->Indent();
   printer->Print(vars, "request,\n" "metadata,\n");
 
   string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
@@ -191,7 +196,7 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print("callback);\n");
 
   printer->Outdent();
-  printer->Print("return call;\n");
+  printer->Outdent();
   printer->Outdent();
   printer->Print("};\n\n\n");
 }
@@ -202,34 +207,34 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       "/**\n"
       " * @param {!proto.$in$} request The request proto\n"
       " * @param {!Object<string, string>} metadata User defined\n"
-      " *    call metadata\n"
+      " *     call metadata\n"
       " * @return {!grpc.web.ClientReadableStream} The XHR Node\n"
-      " *   Readable Stream\n"
+      " *     Readable Stream\n"
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
   printer->Print(
-      "function(request, metadata) {\n"
-      "var stream = this.client_.serverStreaming(this.hostname_ +\n");
+      "  function(request, metadata) {\n"
+      "return this.client_.serverStreaming(this.hostname_ +\n");
+  printer->Indent();
   printer->Indent();
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
   }
 
-  printer->Indent();
   printer->Print(vars,
                  "request,\n"
                  "metadata,\n");
 
   string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
-  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n\n").c_str());
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n").c_str());
 
   printer->Outdent();
-  printer->Print("return stream;\n");
+  printer->Outdent();
   printer->Outdent();
   printer->Print("};\n\n\n");
 }
@@ -297,9 +302,9 @@ class GrpcCodeGenerator : public CodeGenerator {
           vars,
           "goog.provide('proto.$package$.$service_name$Client');\n");
     }
-    printer.Print("\n\n");
+    printer.Print("\n");
 
-    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n\n\n\n");
+    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
     PrintMessagesDeps(&printer, file);
 
     for (int service_index = 0;

2018-10-27 12:33:41,631 - dev: Stanley Cheung, comments [u'" * @param {string} hostname\\n"', u'" * @param {?Object} credentials\\n"', u'" * @constructor\\n"', u'" * @struct\\n"', u'" * @final\\n"', u'" */\\n"', u'"    function(hostname, credentials, options) {\\n"', u'"  /**\\n"', u'"   * @private @const {!grpc.web.$mode$ClientBase} The client\\n"', u'"   */\\n"', u'"  this.client_ = new grpc.web.$mode$ClientBase(options);\\n\\n"', u'"  /**\\n"', u'"   * @private @const {string} The hostname\\n"', u'"   */\\n"', u'"  this.hostname_ = hostname;\\n\\n"', u'"  /**\\n"', u'"   * @private @const {?Object} The credentials to be used to connect\\n"', u'"   *    to the server\\n"', u'"   */\\n"', u'"  this.credentials_ = credentials;\\n\\n"', u'"  /**\\n"', u'"   * @private @const {?Object} Options for the client\\n"', u'"   */\\n"', u'"  this.options_ = options;\\n"', u'"};\\n\\n"', u'" *     request proto\\n"', u'" *     call metadata\\n"', u'" *     function(error, response)\\n"', u'" *     Readable Stream\\n"', u'"  function(request, metadata, callback) {\\n"', u'"return this.client_.rpcCall(this.hostname_ +\\n"', u'"\'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"\'/$package$.$service_name$/$method_name$\',\\n"', u'" *     call metadata\\n"', u'" *     Readable Stream\\n"', u'"  function(request, metadata) {\\n"', u'"return this.client_.serverStreaming(this.hostname_ +\\n"', u'"\'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"\'/$package$.$service_name$/$method_name$\',\\n"', u'"proto.$out$."', u'");\\n"', u'"\\n"', u'"goog.require(\'grpc.web.$mode$ClientBase\');\\n"']
2018-10-27 12:33:41,644 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:41,645 - dev: Processing commit 62/433: 55cfeac15f9f7fe627ceeb7e7308a73689a68d2b - diff: @@ -132,28 +132,32 @@ void PrintServiceConstructor(Printer* printer,
   printer->Print(
       vars,
       "/**\n"
-      "* @constructor\n"
-      "*/\n"
+      " * @param {string} hostname\n"
+      " * @param {?Object} credentials\n"
+      " * @constructor\n"
+      " * @struct\n"
+      " * @final\n"
+      " */\n"
       "proto.$package$.$service_name$Client =\n"
-      "  function(hostname, credentials, options) {\n"
-      "    /**\n"
-      "     * @private {!grpc.web.$mode$ClientBase} the client\n"
-      "     */\n"
-      "    this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
-      "    /**\n"
-      "     * @private {!string} the hostname\n"
-      "     */\n"
-      "    this.hostname_ = hostname;\n\n\n"
-      "    /**\n"
-      "     * @private {?Object} the credentials to be used to connect\n"
-      "     *    to the server\n"
-      "     */\n"
-      "    this.credentials_ = credentials;\n\n"
-      "    /**\n"
-      "     * @private {?Object} options for the client\n"
-      "     */\n"
-      "    this.options_ = options;\n"
-      "  };\n\n");
+      "    function(hostname, credentials, options) {\n"
+      "  /**\n"
+      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
+      "   */\n"
+      "  this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
+      "  /**\n"
+      "   * @private @const {string} The hostname\n"
+      "   */\n"
+      "  this.hostname_ = hostname;\n\n"
+      "  /**\n"
+      "   * @private @const {?Object} The credentials to be used to connect\n"
+      "   *    to the server\n"
+      "   */\n"
+      "  this.credentials_ = credentials;\n\n"
+      "  /**\n"
+      "   * @private @const {?Object} Options for the client\n"
+      "   */\n"
+      "  this.options_ = options;\n"
+      "};\n\n");
 }
 
 void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
@@ -161,29 +165,30 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
       vars,
       "/**\n"
       " * @param {!proto.$in$} request The\n"
-      " *    request proto\n"
+      " *     request proto\n"
       " * @param {!Object<string, string>} metadata User defined\n"
-      " *    call metadata\n"
+      " *     call metadata\n"
       " * @param {function(?string, ?Object=)} callback "
       "The callback\n"
-      " *    function(error, response)\n"
+      " *     function(error, response)\n"
       " * @return {!grpc.web.ClientReadableStream|undefined} The XHR Node\n"
-      " *   Readable Stream\n"
+      " *     Readable Stream\n"
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
   printer->Print(vars,
-                 "function(request, metadata, callback) {\n"
-                 "var call = this.client_.rpcCall(this.hostname_ +\n");
+                 "  function(request, metadata, callback) {\n"
+                 "return this.client_.rpcCall(this.hostname_ +\n");
+  printer->Indent();
+  printer->Indent();
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
   }
 
-  printer->Indent();
   printer->Print(vars, "request,\n" "metadata,\n");
 
   string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
@@ -191,7 +196,7 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print("callback);\n");
 
   printer->Outdent();
-  printer->Print("return call;\n");
+  printer->Outdent();
   printer->Outdent();
   printer->Print("};\n\n\n");
 }
@@ -202,34 +207,34 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       "/**\n"
       " * @param {!proto.$in$} request The request proto\n"
       " * @param {!Object<string, string>} metadata User defined\n"
-      " *    call metadata\n"
+      " *     call metadata\n"
       " * @return {!grpc.web.ClientReadableStream} The XHR Node\n"
-      " *   Readable Stream\n"
+      " *     Readable Stream\n"
       " */\n"
       "proto.$package$.$service_name$Client.prototype.$method_name$ =\n");
   printer->Indent();
   printer->Print(
-      "function(request, metadata) {\n"
-      "var stream = this.client_.serverStreaming(this.hostname_ +\n");
+      "  function(request, metadata) {\n"
+      "return this.client_.serverStreaming(this.hostname_ +\n");
+  printer->Indent();
   printer->Indent();
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "  '/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "  '/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
   }
 
-  printer->Indent();
   printer->Print(vars,
                  "request,\n"
                  "metadata,\n");
 
   string deserializeMethod = GetDeserializeMethodName(vars["mode"]);
-  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n\n").c_str());
+  printer->Print(vars, ("proto.$out$." + deserializeMethod + ");\n").c_str());
 
   printer->Outdent();
-  printer->Print("return stream;\n");
+  printer->Outdent();
   printer->Outdent();
   printer->Print("};\n\n\n");
 }
@@ -297,9 +302,9 @@ class GrpcCodeGenerator : public CodeGenerator {
           vars,
           "goog.provide('proto.$package$.$service_name$Client');\n");
     }
-    printer.Print("\n\n");
+    printer.Print("\n");
 
-    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n\n\n\n");
+    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
     PrintMessagesDeps(&printer, file);
 
     for (int service_index = 0;

2018-10-27 12:33:41,645 - dev: Stanley Cheung, comments [u'" * @param {string} hostname\\n"', u'" * @param {?Object} credentials\\n"', u'" * @constructor\\n"', u'" * @struct\\n"', u'" * @final\\n"', u'" */\\n"', u'"    function(hostname, credentials, options) {\\n"', u'"  /**\\n"', u'"   * @private @const {!grpc.web.$mode$ClientBase} The client\\n"', u'"   */\\n"', u'"  this.client_ = new grpc.web.$mode$ClientBase(options);\\n\\n"', u'"  /**\\n"', u'"   * @private @const {string} The hostname\\n"', u'"   */\\n"', u'"  this.hostname_ = hostname;\\n\\n"', u'"  /**\\n"', u'"   * @private @const {?Object} The credentials to be used to connect\\n"', u'"   *    to the server\\n"', u'"   */\\n"', u'"  this.credentials_ = credentials;\\n\\n"', u'"  /**\\n"', u'"   * @private @const {?Object} Options for the client\\n"', u'"   */\\n"', u'"  this.options_ = options;\\n"', u'"};\\n\\n"', u'" *     request proto\\n"', u'" *     call metadata\\n"', u'" *     function(error, response)\\n"', u'" *     Readable Stream\\n"', u'"  function(request, metadata, callback) {\\n"', u'"return this.client_.rpcCall(this.hostname_ +\\n"', u'"\'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"\'/$package$.$service_name$/$method_name$\',\\n"', u'" *     call metadata\\n"', u'" *     Readable Stream\\n"', u'"  function(request, metadata) {\\n"', u'"return this.client_.serverStreaming(this.hostname_ +\\n"', u'"\'/$$rpc/$package$.$service_name$/$method_name$\',\\n"', u'"\'/$package$.$service_name$/$method_name$\',\\n"', u'"proto.$out$."', u'");\\n"', u'"\\n"', u'"goog.require(\'grpc.web.$mode$ClientBase\');\\n"']
2018-10-27 12:33:41,662 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:41,677 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:41,690 - dev: Processing following file? False, javascript/net/grpc/web/status.js
2018-10-27 12:33:41,703 - dev: Processing following file? False, javascript/net/grpc/web/status.js
2018-10-27 12:33:41,720 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:41,735 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:41,748 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,764 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,778 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,794 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,811 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:41,811 - dev: Processing commit 73/433: 9d2a960b3fc6aa6ac40348fc8682fff03a57b0f6 - diff: @@ -10,7 +10,6 @@
 #include "net/grpc/gateway/log.h"
 #include "net/grpc/gateway/runtime/runtime.h"
 #include "net/grpc/gateway/runtime/types.h"
-#include "third_party/grpc/include/grpc++/support/string_ref.h"
 #include "third_party/grpc/include/grpc/byte_buffer.h"
 #include "third_party/grpc/include/grpc/byte_buffer_reader.h"
 #include "third_party/grpc/include/grpc/grpc.h"
@@ -40,8 +39,7 @@ GrpcBackend::GrpcBackend()
       request_buffer_(nullptr),
       response_buffer_(nullptr),
       status_code_(grpc_status_code::GRPC_STATUS_OK),
-      status_details_(nullptr),
-      status_details_capacity_(0),
+      status_details_(grpc_empty_slice()),
       is_cancelled_(false) {
   BACKEND_DEBUG("Creating GRPC backend proxy.");
   grpc_metadata_array_init(&response_initial_metadata_);
@@ -58,9 +56,7 @@ GrpcBackend::~GrpcBackend() {
   if (response_buffer_ != nullptr) {
     grpc_byte_buffer_destroy(response_buffer_);
   }
-  if (status_details_ != nullptr) {
-    gpr_free(status_details_);
-  }
+  grpc_slice_unref(status_details_);
   if (call_ != nullptr) {
     BACKEND_DEBUG("Destroying GRPC call.");
     grpc_call_destroy(call_);
@@ -77,9 +73,14 @@ grpc_channel* GrpcBackend::CreateChannel() {
 
 grpc_call* GrpcBackend::CreateCall() {
   BACKEND_DEBUG("Creating GRPC call.");
-  return grpc_channel_create_call(
-      channel_, nullptr, 0, Runtime::Get().grpc_event_queue(), method_.c_str(),
-      host_.c_str(), gpr_inf_future(GPR_CLOCK_REALTIME), nullptr);
+  grpc_slice method_slice = grpc_slice_from_copied_string(method_.c_str());
+  grpc_slice host_slice = grpc_slice_from_static_string(host_.c_str());
+  grpc_call* call = grpc_channel_create_call(
+      channel_, nullptr, 0, Runtime::Get().grpc_event_queue(), method_slice,
+      host_.empty() ? nullptr : &host_slice, gpr_inf_future(GPR_CLOCK_REALTIME),
+      nullptr);
+  grpc_slice_unref(method_slice);
+  return call;
 }
 
 void GrpcBackend::Start() {
@@ -88,7 +89,8 @@ void GrpcBackend::Start() {
   // Receives GRPC response initial metadata.
   grpc_op ops[1];
   ops[0].op = GRPC_OP_RECV_INITIAL_METADATA;
-  ops[0].data.recv_initial_metadata = &response_initial_metadata_;
+  ops[0].data.recv_initial_metadata.recv_initial_metadata =
+      &response_initial_metadata_;
   ops[0].flags = 0;
   ops[0].reserved = nullptr;
   grpc_call_error error = grpc_call_start_batch(
@@ -111,9 +113,13 @@ void GrpcBackend::OnResponseInitialMetadata(bool result) {
   std::unique_ptr<Headers> response_headers(new Headers());
   for (size_t i = 0; i < response_initial_metadata_.count; i++) {
     grpc_metadata* metadata = response_initial_metadata_.metadata + i;
-    response_headers->push_back(
-        Header(std::string(metadata->key),
-               string_ref(metadata->value, metadata->value_length)));
+    response_headers->push_back(Header(
+        std::string(
+            reinterpret_cast<char*>(GRPC_SLICE_START_PTR(metadata->key)),
+            GRPC_SLICE_LENGTH(metadata->key)),
+        string_ref(
+            reinterpret_cast<char*>(GRPC_SLICE_START_PTR(metadata->value)),
+            GRPC_SLICE_LENGTH(metadata->value))));
   }
   response->set_headers(std::move(response_headers));
   frontend()->Send(std::move(response));
@@ -121,7 +127,7 @@ void GrpcBackend::OnResponseInitialMetadata(bool result) {
   // Receives next GRPC response message.
   grpc_op ops[1];
   ops[0].op = GRPC_OP_RECV_MESSAGE;
-  ops[0].data.recv_message = &response_buffer_;
+  ops[0].data.recv_message.recv_message = &response_buffer_;
   ops[0].flags = 0;
   ops[0].reserved = nullptr;
   grpc_call_error error = grpc_call_start_batch(
@@ -144,8 +150,6 @@ void GrpcBackend::OnResponseMessage(bool result) {
     ops[0].op = GRPC_OP_RECV_STATUS_ON_CLIENT;
     ops[0].data.recv_status_on_client.status = &status_code_;
     ops[0].data.recv_status_on_client.status_details = &status_details_;
-    ops[0].data.recv_status_on_client.status_details_capacity =
-        &status_details_capacity_;
     ops[0].data.recv_status_on_client.trailing_metadata =
         &response_trailing_metadata_;
     ops[0].flags = 0;
@@ -176,7 +180,7 @@ void GrpcBackend::OnResponseMessage(bool result) {
   // Receives next GRPC response message.
   grpc_op ops[1];
   ops[0].op = GRPC_OP_RECV_MESSAGE;
-  ops[0].data.recv_message = &response_buffer_;
+  ops[0].data.recv_message.recv_message = &response_buffer_;
   ops[0].flags = 0;
   ops[0].reserved = nullptr;
   grpc_call_error error = grpc_call_start_batch(
@@ -194,15 +198,25 @@ void GrpcBackend::OnResponseStatus(bool result) {
   }
 
   std::unique_ptr<Response> response(new Response());
+  grpc::string status_details;
+  if (!GRPC_SLICE_IS_EMPTY(status_details_)) {
+    status_details = grpc::string(
+        reinterpret_cast<char*>(GRPC_SLICE_START_PTR(status_details_)),
+        GRPC_SLICE_LENGTH(status_details_));
+  }
   response->set_status(std::unique_ptr<grpc::Status>(new grpc::Status(
-      static_cast<grpc::StatusCode>(status_code_), status_details_)));
+      static_cast<grpc::StatusCode>(status_code_), status_details)));
 
   std::unique_ptr<Trailers> response_trailers(new Trailers());
   for (size_t i = 0; i < response_trailing_metadata_.count; i++) {
     grpc_metadata* metadata = response_trailing_metadata_.metadata + i;
-    response_trailers->push_back(
-        Trailer(std::string(metadata->key),
-                string_ref(metadata->value, metadata->value_length)));
+    response_trailers->push_back(Trailer(
+        std::string(
+            reinterpret_cast<char*>(GRPC_SLICE_START_PTR(metadata->key)),
+            GRPC_SLICE_LENGTH(metadata->key)),
+        string_ref(
+            reinterpret_cast<char*>(GRPC_SLICE_START_PTR(metadata->value)),
+            GRPC_SLICE_LENGTH(metadata->value))));
   }
   response->set_trailers(std::move(response_trailers));
   frontend()->Send(std::move(response));
@@ -216,10 +230,14 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
     for (Header& header : *request->headers()) {
       std::transform(header.first.begin(), header.first.end(),
                      header.first.begin(), ::tolower);
+      if (header.first == kGrpcAcceptEncoding) {
+        continue;
+      }
       grpc_metadata initial_metadata;
-      initial_metadata.key = header.first.c_str();
-      initial_metadata.value = header.second.data();
-      initial_metadata.value_length = header.second.size();
+      initial_metadata.key = grpc_slice_intern(
+          grpc_slice_from_copied_string(header.first.c_str()));
+      initial_metadata.value = grpc_slice_from_copied_buffer(
+          header.second.data(), header.second.size());
       initial_metadata.flags = 0;
       request_initial_metadata_.push_back(initial_metadata);
     }
@@ -248,7 +266,7 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
     for (auto& slice : slices) {
       grpc_slice_unref(slice);
     }
-    op->data.send_message = request_buffer_;
+    op->data.send_message.send_message = request_buffer_;
     op->flags = 0;
     op->reserved = nullptr;
     op++;

2018-10-27 12:33:41,812 - dev: Feng Li, comments []
2018-10-27 12:33:41,825 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:41,825 - dev: Processing commit 74/433: 45a61f5872169ed8f65c33f1f44d557959416d5d - diff: @@ -491,7 +491,7 @@ void NginxHttpFrontend::SendResponseHeadersToClient(Response *response) {
   }
   ngx_int_t rc = ngx_http_send_header(http_request_);
   if (rc != NGX_OK) {
-    ERROR("Failed to send HTTP response headers via nginx, rc = %ld.", rc);
+    ERROR("Failed to send HTTP response headers via nginx, rc = %" PRIdPTR "", rc);
   }
 }
 

2018-10-27 12:33:41,825 - dev: Leonardo Romor, comments [u'"Failed to send HTTP response headers via nginx, rc = %"', u'""']
2018-10-27 12:33:41,839 - dev: Processing following file? False, Makefile
2018-10-27 12:33:41,857 - dev: Processing following file? False, darwin_x86_64.sh
2018-10-27 12:33:41,875 - dev: Processing following file? False, Makefile
2018-10-27 12:33:41,890 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:41,890 - dev: Processing commit 78/433: d3d63b31d4f1047254307e65c18160054f4ef4ca - diff: @@ -13,8 +13,8 @@
 #include "third_party/grpc/include/grpc/byte_buffer.h"
 #include "third_party/grpc/include/grpc/byte_buffer_reader.h"
 #include "third_party/grpc/include/grpc/grpc.h"
+#include "third_party/grpc/include/grpc/slice.h"
 #include "third_party/grpc/include/grpc/support/alloc.h"
-#include "third_party/grpc/include/grpc/support/slice.h"
 #include "third_party/grpc/include/grpc/support/time.h"
 
 #define BACKEND_PREFIX "[addr: %s, host: %s, method: %s] "
@@ -168,10 +168,10 @@ void GrpcBackend::OnResponseMessage(bool result) {
 
   grpc_byte_buffer_reader reader;
   grpc_byte_buffer_reader_init(&reader, response_buffer_);
-  gpr_slice slice;
+  grpc_slice slice;
   while (grpc_byte_buffer_reader_next(&reader, &slice)) {
     message->push_back(Slice(slice, Slice::STEAL_REF));
-    gpr_slice_unref(slice);
+    grpc_slice_unref(slice);
   }
   grpc_byte_buffer_reader_destroy(&reader);
   response->set_message(std::move(message));
@@ -251,11 +251,11 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
 
   if (request->message() != nullptr) {
     op->op = GRPC_OP_SEND_MESSAGE;
-    std::vector<gpr_slice> slices;
+    std::vector<grpc_slice> slices;
     for (auto& piece : *request->message()) {
-      // TODO(fengli): Once I get an API to access the gpr_slice in a Slice, the
-      // copy can be eliminated.
-      slices.push_back(gpr_slice_from_copied_buffer(
+      // TODO(fengli): Once I get an API to access the grpc_slice in a Slice,
+      // the copy can be eliminated.
+      slices.push_back(grpc_slice_from_copied_buffer(
           reinterpret_cast<const char*>(piece.begin()), piece.size()));
     }
 
@@ -264,7 +264,7 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
     }
     request_buffer_ = grpc_raw_byte_buffer_create(slices.data(), slices.size());
     for (auto& slice : slices) {
-      gpr_slice_unref(slice);
+      grpc_slice_unref(slice);
     }
     op->data.send_message.send_message = request_buffer_;
     op->flags = 0;

2018-10-27 12:33:41,890 - dev: Feng Li, comments [u'"third_party/grpc/include/grpc/slice.h"', u'// TODO(fengli): Once I get an API to access the grpc_slice in a Slice,', u'// the copy can be eliminated.']
2018-10-27 12:33:41,906 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:41,906 - dev: Processing commit 79/433: 2c1ab9780bbabd9111df3e60dca7f605980b390d - diff: @@ -13,8 +13,8 @@
 #include "third_party/grpc/include/grpc/byte_buffer.h"
 #include "third_party/grpc/include/grpc/byte_buffer_reader.h"
 #include "third_party/grpc/include/grpc/grpc.h"
+#include "third_party/grpc/include/grpc/slice.h"
 #include "third_party/grpc/include/grpc/support/alloc.h"
-#include "third_party/grpc/include/grpc/support/slice.h"
 #include "third_party/grpc/include/grpc/support/time.h"
 
 #define BACKEND_PREFIX "[addr: %s, host: %s, method: %s] "
@@ -168,10 +168,10 @@ void GrpcBackend::OnResponseMessage(bool result) {
 
   grpc_byte_buffer_reader reader;
   grpc_byte_buffer_reader_init(&reader, response_buffer_);
-  gpr_slice slice;
+  grpc_slice slice;
   while (grpc_byte_buffer_reader_next(&reader, &slice)) {
     message->push_back(Slice(slice, Slice::STEAL_REF));
-    gpr_slice_unref(slice);
+    grpc_slice_unref(slice);
   }
   grpc_byte_buffer_reader_destroy(&reader);
   response->set_message(std::move(message));
@@ -251,11 +251,11 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
 
   if (request->message() != nullptr) {
     op->op = GRPC_OP_SEND_MESSAGE;
-    std::vector<gpr_slice> slices;
+    std::vector<grpc_slice> slices;
     for (auto& piece : *request->message()) {
-      // TODO(fengli): Once I get an API to access the gpr_slice in a Slice, the
-      // copy can be eliminated.
-      slices.push_back(gpr_slice_from_copied_buffer(
+      // TODO(fengli): Once I get an API to access the grpc_slice in a Slice,
+      // the copy can be eliminated.
+      slices.push_back(grpc_slice_from_copied_buffer(
           reinterpret_cast<const char*>(piece.begin()), piece.size()));
     }
 
@@ -264,7 +264,7 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
     }
     request_buffer_ = grpc_raw_byte_buffer_create(slices.data(), slices.size());
     for (auto& slice : slices) {
-      gpr_slice_unref(slice);
+      grpc_slice_unref(slice);
     }
     op->data.send_message.send_message = request_buffer_;
     op->flags = 0;

2018-10-27 12:33:41,906 - dev: Feng Li, comments [u'"third_party/grpc/include/grpc/slice.h"', u'// TODO(fengli): Once I get an API to access the grpc_slice in a Slice,', u'// the copy can be eliminated.']
2018-10-27 12:33:41,920 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:41,935 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:41,949 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:41,949 - dev: Processing commit 82/433: 11ac46f23175ae624cfea78bfbf96f169d25ecb6 - diff: @@ -493,7 +493,7 @@ void NginxHttpFrontend::SendResponseHeadersToClient(Response *response) {
   }
   ngx_int_t rc = ngx_http_send_header(http_request_);
   if (rc != NGX_OK) {
-    ERROR("Failed to send HTTP response headers via nginx, rc = %ld.", rc);
+    ERROR("Failed to send HTTP response headers via nginx, rc = %" PRIdPTR "", rc);
   }
 }
 

2018-10-27 12:33:41,949 - dev: Feng Li, comments [u'"Failed to send HTTP response headers via nginx, rc = %"', u'""']
2018-10-27 12:33:41,964 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:41,979 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:41,996 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:42,009 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:42,023 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:42,036 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.h
2018-10-27 12:33:42,036 - dev: Processing commit 88/433: cdab833f35bec2d49db892096380bb6d0fbf977d - diff: @@ -10,6 +10,7 @@
 #include "net/grpc/gateway/codec/decoder.h"
 #include "net/grpc/gateway/codec/encoder.h"
 #include "net/grpc/gateway/frontend/frontend.h"
+#include "net/grpc/gateway/nginx_includes.h"
 #include "net/grpc/gateway/runtime/constants.h"
 #include "third_party/grpc/include/grpc++/support/byte_buffer.h"
 #include "third_party/grpc/include/grpc++/support/string_ref.h"
@@ -18,10 +19,6 @@
 extern "C" {
 #endif
 
-#include "third_party/nginx/src/src/core/ngx_config.h"
-#include "third_party/nginx/src/src/core/ngx_core.h"
-#include "third_party/nginx/src/src/http/ngx_http.h"
-
 typedef struct {
   // The pointer of the frontend instance which serves the request.
   std::shared_ptr<grpc::gateway::Frontend> frontend;

2018-10-27 12:33:42,036 - dev: Feng Li, comments [u'"net/grpc/gateway/nginx_includes.h"']
2018-10-27 12:33:42,050 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.h
2018-10-27 12:33:42,050 - dev: Processing commit 89/433: 775d3473f8fecdb6509588b0a026840ef5097dce - diff: @@ -10,6 +10,7 @@
 #include "net/grpc/gateway/codec/decoder.h"
 #include "net/grpc/gateway/codec/encoder.h"
 #include "net/grpc/gateway/frontend/frontend.h"
+#include "net/grpc/gateway/nginx_includes.h"
 #include "net/grpc/gateway/runtime/constants.h"
 #include "third_party/grpc/include/grpc++/support/byte_buffer.h"
 #include "third_party/grpc/include/grpc++/support/string_ref.h"
@@ -18,10 +19,6 @@
 extern "C" {
 #endif
 
-#include "third_party/nginx/src/src/core/ngx_config.h"
-#include "third_party/nginx/src/src/core/ngx_core.h"
-#include "third_party/nginx/src/src/http/ngx_http.h"
-
 typedef struct {
   // The pointer of the frontend instance which serves the request.
   std::shared_ptr<grpc::gateway::Frontend> frontend;

2018-10-27 12:33:42,050 - dev: Feng Li, comments [u'"net/grpc/gateway/nginx_includes.h"']
2018-10-27 12:33:42,096 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_web_encoder.cc
2018-10-27 12:33:42,097 - dev: Processing commit 92/433: b997e063c96b7bed46a4f770b9f0edd565d267c4 - diff: @@ -14,7 +14,6 @@ namespace {
 
 const char kGrpcStatus[] = "grpc-status: %i\r\n";
 const char kGrpcMessage[] = "grpc-message: %s\r\n";
-const char kGrpcTrailer[] = "%s: %s\r\n";
 
 // GRPC Web message frame.
 const uint8_t GRPC_WEB_FH_DATA = 0b0u;
@@ -85,13 +84,16 @@ void GrpcWebEncoder::EncodeStatus(const grpc::Status& status,
 
   // Encodes GRPC trailers.
   for (auto& trailer : *trailers) {
-    size_t grpc_trailer_size = snprintf(
-        nullptr, 0, kGrpcTrailer, trailer.first.c_str(), trailer.second.data());
-    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size + 1);
-    snprintf(reinterpret_cast<char*>(GPR_SLICE_START_PTR(grpc_trailer)),
-             grpc_trailer_size + 1, kGrpcTrailer, trailer.first.c_str(),
-             trailer.second.data());
-    GPR_SLICE_SET_LENGTH(grpc_trailer, grpc_trailer_size);
+    size_t grpc_trailer_size = trailer.first.size() + trailer.second.size() + 4;
+    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
+    uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
+    memcpy(p, trailer.first.c_str(), trailer.first.size());
+    p += trailer.first.size();
+    memcpy(p, ": ", 2);
+    p += 2;
+    memcpy(p, trailer.second.data(), trailer.second.size());
+    p += trailer.second.size();
+    memcpy(p, "\r\n", 2);
     buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
     length += grpc_trailer_size;
   }

2018-10-27 12:33:42,097 - dev: Feng Li, comments [u'": "', u'"\\r\\n"']
2018-10-27 12:33:42,110 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_web_encoder.cc
2018-10-27 12:33:42,110 - dev: Processing commit 93/433: a66fc4b69781d8bba345982e678e509e03163012 - diff: @@ -14,7 +14,6 @@ namespace {
 
 const char kGrpcStatus[] = "grpc-status: %i\r\n";
 const char kGrpcMessage[] = "grpc-message: %s\r\n";
-const char kGrpcTrailer[] = "%s: %s\r\n";
 
 // GRPC Web message frame.
 const uint8_t GRPC_WEB_FH_DATA = 0b0u;
@@ -85,13 +84,16 @@ void GrpcWebEncoder::EncodeStatus(const grpc::Status& status,
 
   // Encodes GRPC trailers.
   for (auto& trailer : *trailers) {
-    size_t grpc_trailer_size = snprintf(
-        nullptr, 0, kGrpcTrailer, trailer.first.c_str(), trailer.second.data());
-    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size + 1);
-    snprintf(reinterpret_cast<char*>(GPR_SLICE_START_PTR(grpc_trailer)),
-             grpc_trailer_size + 1, kGrpcTrailer, trailer.first.c_str(),
-             trailer.second.data());
-    GPR_SLICE_SET_LENGTH(grpc_trailer, grpc_trailer_size);
+    size_t grpc_trailer_size = trailer.first.size() + trailer.second.size() + 4;
+    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
+    uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
+    memcpy(p, trailer.first.c_str(), trailer.first.size());
+    p += trailer.first.size();
+    memcpy(p, ": ", 2);
+    p += 2;
+    memcpy(p, trailer.second.data(), trailer.second.size());
+    p += trailer.second.size();
+    memcpy(p, "\r\n", 2);
     buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
     length += grpc_trailer_size;
   }

2018-10-27 12:33:42,111 - dev: Feng Li, comments [u'": "', u'"\\r\\n"']
2018-10-27 12:33:42,128 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase_test.js
2018-10-27 12:33:42,143 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase_test.js
2018-10-27 12:33:42,157 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase_test.js
2018-10-27 12:33:42,171 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase_test.js
2018-10-27 12:33:42,185 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.h
2018-10-27 12:33:42,185 - dev: Processing commit 98/433: d455c34c3fe5dc814810cf19777b4127a426a5f4 - diff: @@ -1,6 +1,9 @@
 #ifndef NET_GRPC_GATEWAY_FRONTEND_NGINX_HTTP_FRONTEND_H_
 #define NET_GRPC_GATEWAY_FRONTEND_NGINX_HTTP_FRONTEND_H_
 
+//NOTE: Required on top in order to include ngx_config.h libc defines
+#include "net/grpc/gateway/nginx_includes.h"
+
 #include <algorithm>
 #include <functional>
 #include <map>
@@ -10,7 +13,6 @@
 #include "net/grpc/gateway/codec/decoder.h"
 #include "net/grpc/gateway/codec/encoder.h"
 #include "net/grpc/gateway/frontend/frontend.h"
-#include "net/grpc/gateway/nginx_includes.h"
 #include "net/grpc/gateway/runtime/constants.h"
 #include "third_party/grpc/include/grpc++/support/byte_buffer.h"
 #include "third_party/grpc/include/grpc++/support/string_ref.h"

2018-10-27 12:33:42,185 - dev: Leonardo Romor, comments [u'//NOTE: Required on top in order to include ngx_config.h libc defines', u'"net/grpc/gateway/nginx_includes.h"']
2018-10-27 12:33:42,201 - dev: Processing following file? False, net/grpc/gateway/examples/echo/nginx.conf
2018-10-27 12:33:42,214 - dev: Processing following file? False, net/grpc/gateway/examples/echo/nginx.conf
2018-10-27 12:33:42,228 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.h
2018-10-27 12:33:42,228 - dev: Processing commit 101/433: 1602fed09076408ae1179ba421574728c2158985 - diff: @@ -1,6 +1,9 @@
 #ifndef NET_GRPC_GATEWAY_FRONTEND_NGINX_HTTP_FRONTEND_H_
 #define NET_GRPC_GATEWAY_FRONTEND_NGINX_HTTP_FRONTEND_H_
 
+//NOTE: Required on top in order to include ngx_config.h libc defines
+#include "net/grpc/gateway/nginx_includes.h"
+
 #include <algorithm>
 #include <functional>
 #include <map>
@@ -10,7 +13,6 @@
 #include "net/grpc/gateway/codec/decoder.h"
 #include "net/grpc/gateway/codec/encoder.h"
 #include "net/grpc/gateway/frontend/frontend.h"
-#include "net/grpc/gateway/nginx_includes.h"
 #include "net/grpc/gateway/runtime/constants.h"
 #include "third_party/grpc/include/grpc++/support/byte_buffer.h"
 #include "third_party/grpc/include/grpc++/support/string_ref.h"

2018-10-27 12:33:42,229 - dev: Feng Li, comments [u'//NOTE: Required on top in order to include ngx_config.h libc defines', u'"net/grpc/gateway/nginx_includes.h"']
2018-10-27 12:33:42,242 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,258 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,272 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,285 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,299 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:42,299 - dev: Processing commit 106/433: 2746b47135a93eee24106eab485f4e9617e41148 - diff: @@ -373,9 +373,7 @@ class GrpcCodeGenerator : public CodeGenerator {
         // Client streaming is not supported yet
         if (!method->client_streaming()) {
           if (method->server_streaming()) {
-            if (mode == "base64" || mode == "jspb") {
-              PrintServerStreamingCall(&printer, vars);
-            }
+            PrintServerStreamingCall(&printer, vars);
           } else {
             PrintUnaryCall(&printer, vars);
           }

2018-10-27 12:33:42,299 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,312 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:42,312 - dev: Processing commit 107/433: 3d7fa5e35703811c4ad5746b1802e8b698756a4e - diff: @@ -373,9 +373,7 @@ class GrpcCodeGenerator : public CodeGenerator {
         // Client streaming is not supported yet
         if (!method->client_streaming()) {
           if (method->server_streaming()) {
-            if (mode == "base64" || mode == "jspb") {
-              PrintServerStreamingCall(&printer, vars);
-            }
+            PrintServerStreamingCall(&printer, vars);
           } else {
             PrintUnaryCall(&printer, vars);
           }

2018-10-27 12:33:42,312 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,331 - dev: Processing following file? False, Makefile
2018-10-27 12:33:42,345 - dev: Processing following file? False, third_party/nginx/src
2018-10-27 12:33:42,361 - dev: Processing following file? False, Makefile
2018-10-27 12:33:42,374 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,403 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:42,417 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:42,432 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:42,432 - dev: Processing commit 115/433: 245b0e14a159dced17748508b3acf731e070a267 - diff: @@ -59,7 +59,7 @@ GrpcBackend::~GrpcBackend() {
   grpc_slice_unref(status_details_);
   if (call_ != nullptr) {
     BACKEND_DEBUG("Destroying GRPC call.");
-    grpc_call_destroy(call_);
+    grpc_call_unref(call_);
   }
   if (!use_shared_channel_pool_ && channel_ != nullptr) {
     BACKEND_DEBUG("Destroying GRPC channel.");
@@ -223,7 +223,7 @@ void GrpcBackend::OnResponseStatus(bool result) {
 }
 
 void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
-  grpc_op ops[3];
+  grpc_op ops[3] = {};
   grpc_op* op = ops;
 
   if (request->headers() != nullptr) {

2018-10-27 12:33:42,432 - dev: Feng Li, comments []
2018-10-27 12:33:42,446 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:42,463 - dev: Processing following file? False, init_submodules.sh
2018-10-27 12:33:42,477 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:42,477 - dev: Processing commit 118/433: 8b88ff2f84d6e543fb70756344706e2c9f1e96e2 - diff: @@ -94,10 +94,12 @@ void continue_read_request_body(ngx_http_request_t *r) {
 void continue_write_response(ngx_http_request_t *r) {
   if (ngx_http_output_filter(r, nullptr) == NGX_AGAIN) {
     r->write_event_handler = continue_write_response;
-    ngx_handle_write_event(r->connection->write, 0);
   } else {
     r->write_event_handler = ngx_http_request_empty_handler;
   }
+  if (ngx_handle_write_event(r->connection->write, 0) != NGX_OK) {
+    ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
+  }
 }
 
 void client_liveness_detection_handler(ngx_event_t *event) {
@@ -271,7 +273,11 @@ void NginxHttpFrontend::SendResponseMessageToClient(Response *response) {
       ngx_chain_seek_to_last(output)->buf->flush = 1;
       if (ngx_http_output_filter(http_request_, output) == NGX_AGAIN) {
         http_request_->write_event_handler = continue_write_response;
-        ngx_handle_write_event(http_request_->connection->write, 0);
+      }
+      if (ngx_handle_write_event(http_request_->connection->write, 0) !=
+          NGX_OK) {
+        ngx_http_finalize_request(http_request_,
+                                  NGX_HTTP_INTERNAL_SERVER_ERROR);
       }
     }
   }
@@ -587,7 +593,9 @@ void NginxHttpFrontend::WriteToNginxResponse(uint8_t *data, size_t size) {
   ngx_chain_seek_to_last(output)->buf->flush = 1;
   if (ngx_http_output_filter(http_request_, output) == NGX_AGAIN) {
     http_request_->write_event_handler = continue_write_response;
-    ngx_handle_write_event(http_request_->connection->write, 0);
+  }
+  if (ngx_handle_write_event(http_request_->connection->write, 0) != NGX_OK) {
+    ngx_http_finalize_request(http_request_, NGX_HTTP_INTERNAL_SERVER_ERROR);
   }
 }  // namespace gateway
 

2018-10-27 12:33:42,477 - dev: Feng Li, comments []
2018-10-27 12:33:42,491 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:42,491 - dev: Processing commit 119/433: 02924b8517f117a0f2111d420322ad719c5e494d - diff: @@ -94,10 +94,12 @@ void continue_read_request_body(ngx_http_request_t *r) {
 void continue_write_response(ngx_http_request_t *r) {
   if (ngx_http_output_filter(r, nullptr) == NGX_AGAIN) {
     r->write_event_handler = continue_write_response;
-    ngx_handle_write_event(r->connection->write, 0);
   } else {
     r->write_event_handler = ngx_http_request_empty_handler;
   }
+  if (ngx_handle_write_event(r->connection->write, 0) != NGX_OK) {
+    ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
+  }
 }
 
 void client_liveness_detection_handler(ngx_event_t *event) {
@@ -271,7 +273,11 @@ void NginxHttpFrontend::SendResponseMessageToClient(Response *response) {
       ngx_chain_seek_to_last(output)->buf->flush = 1;
       if (ngx_http_output_filter(http_request_, output) == NGX_AGAIN) {
         http_request_->write_event_handler = continue_write_response;
-        ngx_handle_write_event(http_request_->connection->write, 0);
+      }
+      if (ngx_handle_write_event(http_request_->connection->write, 0) !=
+          NGX_OK) {
+        ngx_http_finalize_request(http_request_,
+                                  NGX_HTTP_INTERNAL_SERVER_ERROR);
       }
     }
   }
@@ -587,7 +593,9 @@ void NginxHttpFrontend::WriteToNginxResponse(uint8_t *data, size_t size) {
   ngx_chain_seek_to_last(output)->buf->flush = 1;
   if (ngx_http_output_filter(http_request_, output) == NGX_AGAIN) {
     http_request_->write_event_handler = continue_write_response;
-    ngx_handle_write_event(http_request_->connection->write, 0);
+  }
+  if (ngx_handle_write_event(http_request_->connection->write, 0) != NGX_OK) {
+    ngx_http_finalize_request(http_request_, NGX_HTTP_INTERNAL_SERVER_ERROR);
   }
 }  // namespace gateway
 

2018-10-27 12:33:42,491 - dev: Feng Li, comments []
2018-10-27 12:33:42,504 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,518 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,533 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:42,547 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,560 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,574 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,616 - dev: Processing following file? True, net/grpc/gateway/runtime/grpc_event_queue.cc
2018-10-27 12:33:42,616 - dev: Processing commit 128/433: 4c45c6c043178d226c8a57980acc5c73e2963a95 - diff: @@ -19,6 +19,7 @@ GrpcEventQueue::~GrpcEventQueue() {}
 
 void GrpcEventQueue::Start() {
   gpr_thd_options thread_options = gpr_thd_options_default();
+  gpr_thd_options_set_joinable(&thread_options);
   int ret = gpr_thd_new(&thread_id_, ExecuteEventLoop, this, &thread_options);
   INFO("GRPC event thread started: %d", ret);
 }

2018-10-27 12:33:42,617 - dev: Feng Li, comments []
2018-10-27 12:33:42,630 - dev: Processing following file? True, net/grpc/gateway/runtime/grpc_event_queue.cc
2018-10-27 12:33:42,630 - dev: Processing commit 129/433: 3298898a87038927682306c18ae4518926aa1bd6 - diff: @@ -19,6 +19,7 @@ GrpcEventQueue::~GrpcEventQueue() {}
 
 void GrpcEventQueue::Start() {
   gpr_thd_options thread_options = gpr_thd_options_default();
+  gpr_thd_options_set_joinable(&thread_options);
   int ret = gpr_thd_new(&thread_id_, ExecuteEventLoop, this, &thread_options);
   INFO("GRPC event thread started: %d", ret);
 }

2018-10-27 12:33:42,630 - dev: Feng Li, comments []
2018-10-27 12:33:42,643 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,673 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:42,673 - dev: Processing commit 132/433: 7ca17868e6918ab9797e2423f6129450d445588a - diff: @@ -147,20 +147,24 @@ void NginxHttpFrontend::Start() {
     http_request_->request_body_no_buffering = true;
   }
 
-  // Initialize the dummy connection of client liveness detection timer.
-  client_liveness_detection_timer_connection_ = static_cast<ngx_connection_t *>(
-      ngx_pcalloc(http_request_->pool, sizeof(ngx_connection_t)));
-  client_liveness_detection_timer_connection_->fd =
-      static_cast<ngx_socket_t>(-1);
-  client_liveness_detection_timer_connection_->data = this;
-
-  // Initialize the client liveness detection timer.
-  client_liveness_detection_timer_ = static_cast<ngx_event_t *>(
-      ngx_pcalloc(http_request_->pool, sizeof(ngx_event_t)));
-  client_liveness_detection_timer_->log = http_request_->connection->log;
-  client_liveness_detection_timer_->handler = client_liveness_detection_handler;
-  client_liveness_detection_timer_->data =
-      client_liveness_detection_timer_connection_;
+  if (client_liveness_detection_interval_ > 0) {
+    // Initialize the dummy connection of client liveness detection timer.
+    client_liveness_detection_timer_connection_ =
+        static_cast<ngx_connection_t *>(
+            ngx_pcalloc(http_request_->pool, sizeof(ngx_connection_t)));
+    client_liveness_detection_timer_connection_->fd =
+        static_cast<ngx_socket_t>(-1);
+    client_liveness_detection_timer_connection_->data = this;
+
+    // Initialize the client liveness detection timer.
+    client_liveness_detection_timer_ = static_cast<ngx_event_t *>(
+        ngx_pcalloc(http_request_->pool, sizeof(ngx_event_t)));
+    client_liveness_detection_timer_->log = http_request_->connection->log;
+    client_liveness_detection_timer_->handler =
+        client_liveness_detection_handler;
+    client_liveness_detection_timer_->data =
+        client_liveness_detection_timer_connection_;
+  }
 
   ngx_int_t rc = ngx_http_read_client_request_body(http_request_,
                                                    continue_read_request_body);
@@ -183,7 +187,7 @@ void NginxHttpFrontend::ContinueReadRequestBody() {
     // FIN or RST from client received.
     DEBUG("receive FIN from peer, close the HTTP connection.");
     backend()->Cancel(grpc::Status::CANCELLED);
-    ngx_http_close_connection(http_request_->connection);
+    ngx_http_finalize_request(http_request_, NGX_DONE);
     return;
   }
 
@@ -600,6 +604,11 @@ void NginxHttpFrontend::WriteToNginxResponse(uint8_t *data, size_t size) {
 }  // namespace gateway
 
 void NginxHttpFrontend::OnClientLivenessDetectionEvent(ngx_event_t *event) {
+  if (http_request_ == nullptr) {
+    // The HTTP request has been finalized.
+    return;
+  }
+
   if (response_protocol_ == Protocol::PROTO_STREAM_BODY) {
     uint8_t *data =
         reinterpret_cast<uint8_t *>(ngx_palloc(http_request_->pool, 2));

2018-10-27 12:33:42,673 - dev: Feng Li, comments [u'// Initialize the dummy connection of client liveness detection timer.', u'// Initialize the client liveness detection timer.', u'// The HTTP request has been finalized.']
2018-10-27 12:33:42,687 - dev: Processing following file? True, net/grpc/gateway/frontend/nginx_http_frontend.cc
2018-10-27 12:33:42,687 - dev: Processing commit 133/433: 616925f790af6d2253a20f4acf8b3a61ed896e16 - diff: @@ -147,20 +147,24 @@ void NginxHttpFrontend::Start() {
     http_request_->request_body_no_buffering = true;
   }
 
-  // Initialize the dummy connection of client liveness detection timer.
-  client_liveness_detection_timer_connection_ = static_cast<ngx_connection_t *>(
-      ngx_pcalloc(http_request_->pool, sizeof(ngx_connection_t)));
-  client_liveness_detection_timer_connection_->fd =
-      static_cast<ngx_socket_t>(-1);
-  client_liveness_detection_timer_connection_->data = this;
-
-  // Initialize the client liveness detection timer.
-  client_liveness_detection_timer_ = static_cast<ngx_event_t *>(
-      ngx_pcalloc(http_request_->pool, sizeof(ngx_event_t)));
-  client_liveness_detection_timer_->log = http_request_->connection->log;
-  client_liveness_detection_timer_->handler = client_liveness_detection_handler;
-  client_liveness_detection_timer_->data =
-      client_liveness_detection_timer_connection_;
+  if (client_liveness_detection_interval_ > 0) {
+    // Initialize the dummy connection of client liveness detection timer.
+    client_liveness_detection_timer_connection_ =
+        static_cast<ngx_connection_t *>(
+            ngx_pcalloc(http_request_->pool, sizeof(ngx_connection_t)));
+    client_liveness_detection_timer_connection_->fd =
+        static_cast<ngx_socket_t>(-1);
+    client_liveness_detection_timer_connection_->data = this;
+
+    // Initialize the client liveness detection timer.
+    client_liveness_detection_timer_ = static_cast<ngx_event_t *>(
+        ngx_pcalloc(http_request_->pool, sizeof(ngx_event_t)));
+    client_liveness_detection_timer_->log = http_request_->connection->log;
+    client_liveness_detection_timer_->handler =
+        client_liveness_detection_handler;
+    client_liveness_detection_timer_->data =
+        client_liveness_detection_timer_connection_;
+  }
 
   ngx_int_t rc = ngx_http_read_client_request_body(http_request_,
                                                    continue_read_request_body);
@@ -183,7 +187,7 @@ void NginxHttpFrontend::ContinueReadRequestBody() {
     // FIN or RST from client received.
     DEBUG("receive FIN from peer, close the HTTP connection.");
     backend()->Cancel(grpc::Status::CANCELLED);
-    ngx_http_close_connection(http_request_->connection);
+    ngx_http_finalize_request(http_request_, NGX_DONE);
     return;
   }
 
@@ -600,6 +604,11 @@ void NginxHttpFrontend::WriteToNginxResponse(uint8_t *data, size_t size) {
 }  // namespace gateway
 
 void NginxHttpFrontend::OnClientLivenessDetectionEvent(ngx_event_t *event) {
+  if (http_request_ == nullptr) {
+    // The HTTP request has been finalized.
+    return;
+  }
+
   if (response_protocol_ == Protocol::PROTO_STREAM_BODY) {
     uint8_t *data =
         reinterpret_cast<uint8_t *>(ngx_palloc(http_request_->pool, 2));

2018-10-27 12:33:42,687 - dev: Feng Li, comments [u'// Initialize the dummy connection of client liveness detection timer.', u'// Initialize the client liveness detection timer.', u'// The HTTP request has been finalized.']
2018-10-27 12:33:42,702 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:42,702 - dev: Processing commit 134/433: e64c2779be14a1ce4592a98695ad88b5e5ad6312 - diff: @@ -48,6 +48,10 @@ GrpcBackend::GrpcBackend()
 
 GrpcBackend::~GrpcBackend() {
   BACKEND_DEBUG("Deleting GRPC backend proxy.");
+  for (auto& m : request_initial_metadata_) {
+    grpc_slice_unref(m.key);
+    grpc_slice_unref(m.value);
+  }
   grpc_metadata_array_destroy(&response_initial_metadata_);
   grpc_metadata_array_destroy(&response_trailing_metadata_);
   if (request_buffer_ != nullptr) {
@@ -171,9 +175,9 @@ void GrpcBackend::OnResponseMessage(bool result) {
   grpc_slice slice;
   while (grpc_byte_buffer_reader_next(&reader, &slice)) {
     message->push_back(Slice(slice, Slice::STEAL_REF));
-    grpc_slice_unref(slice);
   }
   grpc_byte_buffer_reader_destroy(&reader);
+  grpc_byte_buffer_destroy(response_buffer_);
   response->set_message(std::move(message));
   frontend()->Send(std::move(response));
 
@@ -234,8 +238,8 @@ void GrpcBackend::Send(std::unique_ptr<Request> request, Tag* on_done) {
         continue;
       }
       grpc_metadata initial_metadata;
-      initial_metadata.key = grpc_slice_intern(
-          grpc_slice_from_copied_string(header.first.c_str()));
+      initial_metadata.key =
+          grpc_slice_from_copied_string(header.first.c_str());
       initial_metadata.value = grpc_slice_from_copied_buffer(
           header.second.data(), header.second.size());
       initial_metadata.flags = 0;

2018-10-27 12:33:42,702 - dev: Feng Li, comments []
2018-10-27 12:33:42,715 - dev: Processing following file? False, Makefile
2018-10-27 12:33:42,731 - dev: Processing following file? False, Makefile
2018-10-27 12:33:42,773 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:42,774 - dev: Processing commit 139/433: bcc89b8856f08ec0fd019b5b365632f1194f9326 - diff: @@ -59,6 +59,7 @@ enum Mode {
   GATEWAY = 1,     // open-source gRPC Gateway, currently nginx
   OPJSPB = 2,      // first party google3 one platform services with JSPB
   FRAMEWORKS = 3,  // first party google3 AF services with AF data add-ons
+  GRPCWEB = 4,     // client using the application/grpc-web wire format
 };
 
 string GetModeVar(const Mode mode) {
@@ -71,6 +72,8 @@ string GetModeVar(const Mode mode) {
       return "OPJspb";
     case FRAMEWORKS:
       return "Frameworks";
+    case GRPCWEB:
+      return "GrpcWeb";
   }
 }
 
@@ -325,6 +328,8 @@ class GrpcCodeGenerator : public CodeGenerator {
       vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
       vars["mode"] = GetModeVar(Mode::GATEWAY);
+    } else if (mode == "grpcweb") {
+      vars["mode"] = GetModeVar(Mode::GRPCWEB);
     } else if (mode == "jspb") {
       vars["mode"] = GetModeVar(Mode::OPJSPB);
     } else if (mode == "frameworks") {

2018-10-27 12:33:42,774 - dev: Stanley Cheung, comments [u'// client using the application/grpc-web wire format', u'"GrpcWeb"', u'"grpcweb"', u'"mode"']
2018-10-27 12:33:42,790 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:42,790 - dev: Processing commit 140/433: 4930d3a3f726862d68eaeac0b9148c25edae7324 - diff: @@ -59,6 +59,7 @@ enum Mode {
   GATEWAY = 1,     // open-source gRPC Gateway, currently nginx
   OPJSPB = 2,      // first party google3 one platform services with JSPB
   FRAMEWORKS = 3,  // first party google3 AF services with AF data add-ons
+  GRPCWEB = 4,     // client using the application/grpc-web wire format
 };
 
 string GetModeVar(const Mode mode) {
@@ -71,6 +72,8 @@ string GetModeVar(const Mode mode) {
       return "OPJspb";
     case FRAMEWORKS:
       return "Frameworks";
+    case GRPCWEB:
+      return "GrpcWeb";
   }
 }
 
@@ -325,6 +328,8 @@ class GrpcCodeGenerator : public CodeGenerator {
       vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
       vars["mode"] = GetModeVar(Mode::GATEWAY);
+    } else if (mode == "grpcweb") {
+      vars["mode"] = GetModeVar(Mode::GRPCWEB);
     } else if (mode == "jspb") {
       vars["mode"] = GetModeVar(Mode::OPJSPB);
     } else if (mode == "frameworks") {

2018-10-27 12:33:42,790 - dev: Stanley Cheung, comments [u'// client using the application/grpc-web wire format', u'"GrpcWeb"', u'"grpcweb"', u'"mode"']
2018-10-27 12:33:42,804 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:42,817 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:42,830 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:42,830 - dev: Processing commit 143/433: 5579bc86cf4f1fff16088b511f3694e7d52a56bd - diff: @@ -151,6 +151,7 @@ void GrpcBackend::OnResponseMessage(bool result) {
   if (response_buffer_ == nullptr) {
     // Receives the GRPC response status.
     grpc_op ops[1];
+    memset(ops, 0, sizeof(ops));
     ops[0].op = GRPC_OP_RECV_STATUS_ON_CLIENT;
     ops[0].data.recv_status_on_client.status = &status_code_;
     ops[0].data.recv_status_on_client.status_details = &status_details_;

2018-10-27 12:33:42,831 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,844 - dev: Processing following file? True, net/grpc/gateway/backend/grpc_backend.cc
2018-10-27 12:33:42,844 - dev: Processing commit 144/433: a85efc2212717544bc20b2ecf2e1b69ef9c336e1 - diff: @@ -151,6 +151,7 @@ void GrpcBackend::OnResponseMessage(bool result) {
   if (response_buffer_ == nullptr) {
     // Receives the GRPC response status.
     grpc_op ops[1];
+    memset(ops, 0, sizeof(ops));
     ops[0].op = GRPC_OP_RECV_STATUS_ON_CLIENT;
     ops[0].data.recv_status_on_client.status = &status_code_;
     ops[0].data.recv_status_on_client.status_details = &status_details_;

2018-10-27 12:33:42,844 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,860 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:42,860 - dev: Processing commit 145/433: 9b6b32ffe5d552c80c9b045b5037c37d80414092 - diff: @@ -2,10 +2,8 @@
 
 #include "net/grpc/gateway/log.h"
 #include "net/grpc/gateway/utils.h"
-extern "C" {
 #include "third_party/grpc/src/core/lib/compression/message_compress.h"
 #include "third_party/grpc/src/core/lib/iomgr/exec_ctx.h"
-}
 
 namespace grpc {
 namespace gateway {

2018-10-27 12:33:42,860 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,874 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:42,874 - dev: Processing commit 146/433: e36a4980d3e5e301b691a8d5934dfb5eb9e5ce40 - diff: @@ -2,10 +2,8 @@
 
 #include "net/grpc/gateway/log.h"
 #include "net/grpc/gateway/utils.h"
-extern "C" {
 #include "third_party/grpc/src/core/lib/compression/message_compress.h"
 #include "third_party/grpc/src/core/lib/iomgr/exec_ctx.h"
-}
 
 namespace grpc {
 namespace gateway {

2018-10-27 12:33:42,874 - dev: Stanley Cheung, comments []
2018-10-27 12:33:42,887 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,900 - dev: Processing following file? False, README.md
2018-10-27 12:33:42,914 - dev: Processing following file? False, net/grpc/gateway/examples/echo/echotest.html
2018-10-27 12:33:42,929 - dev: Processing following file? False, net/grpc/gateway/examples/echo/echotest.html
2018-10-27 12:33:42,942 - dev: Processing following file? False, third_party/closure-library
2018-10-27 12:33:42,956 - dev: Processing following file? False, third_party/closure-library
2018-10-27 12:33:42,969 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:42,983 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:43,000 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:43,014 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:43,028 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:43,043 - dev: Processing following file? False, javascript/net/grpc/web/clientreadablestream.js
2018-10-27 12:33:43,058 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:43,059 - dev: Processing commit 159/433: 8aa8ce9039a9b8049a6727130744e13e7ce7cc2a - diff: @@ -15,7 +15,7 @@ GrpcDecoder::GrpcDecoder()
 GrpcDecoder::~GrpcDecoder() {}
 
 Status GrpcDecoder::Decode() {
-  grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;
+  grpc_core::ExecCtx exec_ctx;
   for (const Slice& slice : *inputs()) {
     if (slice.size() == 0) {
       continue;
@@ -32,7 +32,7 @@ Status GrpcDecoder::Decode() {
             Status status(StatusCode::INVALID_ARGUMENT,
                           Format("Receives invalid compressed flag: %c.", c));
             DEBUG("%s", status.error_message().c_str());
-            grpc_exec_ctx_finish(&exec_ctx);
+
             return status;
           }
           compressed_flag_ = c;
@@ -85,11 +85,11 @@ Status GrpcDecoder::Decode() {
               grpc_slice_buffer output;
               grpc_slice_buffer_init(&output);
               if (grpc_msg_decompress(
-                      &exec_ctx, grpc_compression_algorithm::GRPC_COMPRESS_GZIP,
-                      &input, &output) != 1) {
+                      grpc_compression_algorithm::GRPC_COMPRESS_GZIP, &input,
+                      &output) != 1) {
                 grpc_slice_buffer_destroy(&input);
                 grpc_slice_buffer_destroy(&output);
-                grpc_exec_ctx_finish(&exec_ctx);
+
                 return Status(StatusCode::INTERNAL,
                               "Failed to uncompress the GRPC data frame.");
               }
@@ -115,7 +115,7 @@ Status GrpcDecoder::Decode() {
     }
   }
   inputs()->clear();
-  grpc_exec_ctx_finish(&exec_ctx);
+
   return Status::OK;
 }
 }  // namespace gateway

2018-10-27 12:33:43,059 - dev: Stanley Cheung, comments []
2018-10-27 12:33:43,072 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:43,086 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:43,086 - dev: Processing commit 161/433: 34b57a4d8510761e88b3e457ecb6d875109a19be - diff: @@ -15,7 +15,7 @@ GrpcDecoder::GrpcDecoder()
 GrpcDecoder::~GrpcDecoder() {}
 
 Status GrpcDecoder::Decode() {
-  grpc_exec_ctx exec_ctx = GRPC_EXEC_CTX_INIT;
+  grpc_core::ExecCtx exec_ctx;
   for (const Slice& slice : *inputs()) {
     if (slice.size() == 0) {
       continue;
@@ -32,7 +32,7 @@ Status GrpcDecoder::Decode() {
             Status status(StatusCode::INVALID_ARGUMENT,
                           Format("Receives invalid compressed flag: %c.", c));
             DEBUG("%s", status.error_message().c_str());
-            grpc_exec_ctx_finish(&exec_ctx);
+
             return status;
           }
           compressed_flag_ = c;
@@ -85,11 +85,11 @@ Status GrpcDecoder::Decode() {
               grpc_slice_buffer output;
               grpc_slice_buffer_init(&output);
               if (grpc_msg_decompress(
-                      &exec_ctx, grpc_compression_algorithm::GRPC_COMPRESS_GZIP,
-                      &input, &output) != 1) {
+                      grpc_compression_algorithm::GRPC_COMPRESS_GZIP, &input,
+                      &output) != 1) {
                 grpc_slice_buffer_destroy(&input);
                 grpc_slice_buffer_destroy(&output);
-                grpc_exec_ctx_finish(&exec_ctx);
+
                 return Status(StatusCode::INTERNAL,
                               "Failed to uncompress the GRPC data frame.");
               }
@@ -115,7 +115,7 @@ Status GrpcDecoder::Decode() {
     }
   }
   inputs()->clear();
-  grpc_exec_ctx_finish(&exec_ctx);
+
   return Status::OK;
 }
 }  // namespace gateway

2018-10-27 12:33:43,086 - dev: Stanley Cheung, comments []
2018-10-27 12:33:43,099 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_web_encoder.cc
2018-10-27 12:33:43,100 - dev: Processing commit 162/433: 0b17363ce046dc032892e0171401eb5b6412a491 - diff: @@ -83,19 +83,22 @@ void GrpcWebEncoder::EncodeStatus(const grpc::Status& status,
   }
 
   // Encodes GRPC trailers.
-  for (auto& trailer : *trailers) {
-    size_t grpc_trailer_size = trailer.first.size() + trailer.second.size() + 4;
-    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
-    uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
-    memcpy(p, trailer.first.c_str(), trailer.first.size());
-    p += trailer.first.size();
-    memcpy(p, ": ", 2);
-    p += 2;
-    memcpy(p, trailer.second.data(), trailer.second.size());
-    p += trailer.second.size();
-    memcpy(p, "\r\n", 2);
-    buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
-    length += grpc_trailer_size;
+  if (trailers != nullptr) {
+    for (auto& trailer : *trailers) {
+      size_t grpc_trailer_size =
+          trailer.first.size() + trailer.second.size() + 4;
+      grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
+      uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
+      memcpy(p, trailer.first.c_str(), trailer.first.size());
+      p += trailer.first.size();
+      memcpy(p, ": ", 2);
+      p += 2;
+      memcpy(p, trailer.second.data(), trailer.second.size());
+      p += trailer.second.size();
+      memcpy(p, "\r\n", 2);
+      buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
+      length += grpc_trailer_size;
+    }
   }
 
   // Encodes GRPC trailer frame.

2018-10-27 12:33:43,100 - dev: Feng Li, comments [u'": "', u'"\\r\\n"']
2018-10-27 12:33:43,113 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_web_encoder.cc
2018-10-27 12:33:43,114 - dev: Processing commit 163/433: 286990203fd5a0d8d884bc92dd963e50e6d9210e - diff: @@ -83,19 +83,22 @@ void GrpcWebEncoder::EncodeStatus(const grpc::Status& status,
   }
 
   // Encodes GRPC trailers.
-  for (auto& trailer : *trailers) {
-    size_t grpc_trailer_size = trailer.first.size() + trailer.second.size() + 4;
-    grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
-    uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
-    memcpy(p, trailer.first.c_str(), trailer.first.size());
-    p += trailer.first.size();
-    memcpy(p, ": ", 2);
-    p += 2;
-    memcpy(p, trailer.second.data(), trailer.second.size());
-    p += trailer.second.size();
-    memcpy(p, "\r\n", 2);
-    buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
-    length += grpc_trailer_size;
+  if (trailers != nullptr) {
+    for (auto& trailer : *trailers) {
+      size_t grpc_trailer_size =
+          trailer.first.size() + trailer.second.size() + 4;
+      grpc_slice grpc_trailer = grpc_slice_malloc(grpc_trailer_size);
+      uint8_t* p = GPR_SLICE_START_PTR(grpc_trailer);
+      memcpy(p, trailer.first.c_str(), trailer.first.size());
+      p += trailer.first.size();
+      memcpy(p, ": ", 2);
+      p += 2;
+      memcpy(p, trailer.second.data(), trailer.second.size());
+      p += trailer.second.size();
+      memcpy(p, "\r\n", 2);
+      buffer.push_back(Slice(grpc_trailer, Slice::STEAL_REF));
+      length += grpc_trailer_size;
+    }
   }
 
   // Encodes GRPC trailer frame.

2018-10-27 12:33:43,114 - dev: Feng Li, comments [u'": "', u'"\\r\\n"']
2018-10-27 12:33:43,131 - dev: Processing following file? False, Makefile
2018-10-27 12:33:43,147 - dev: Processing following file? False, Makefile
2018-10-27 12:33:43,166 - dev: Processing following file? False, Makefile
2018-10-27 12:33:43,180 - dev: Processing following file? False, Dockerfile
2018-10-27 12:33:43,196 - dev: Processing following file? False, Makefile
2018-10-27 12:33:43,210 - dev: Processing following file? False, Makefile
2018-10-27 12:33:43,223 - dev: Processing following file? False, net/grpc/gateway/nginx/nginx.pid
2018-10-27 12:33:43,237 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:43,251 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:43,266 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:43,280 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:43,293 - dev: Processing following file? False, javascript/net/grpc/web/streambodyclientreadablestream.js
2018-10-27 12:33:43,306 - dev: Processing following file? False, javascript/net/grpc/web/streambodyclientreadablestream.js
2018-10-27 12:33:43,321 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:43,322 - dev: Processing commit 177/433: 7ccd95c986898fdaecd6f73517328196daf9a3ea - diff: @@ -84,9 +84,9 @@ Status GrpcDecoder::Decode() {
               grpc_slice_buffer_add(&input, slice_input);
               grpc_slice_buffer output;
               grpc_slice_buffer_init(&output);
-              if (grpc_msg_decompress(
-                      grpc_compression_algorithm::GRPC_COMPRESS_GZIP, &input,
-                      &output) != 1) {
+              if (grpc_msg_decompress(grpc_message_compression_algorithm::
+                                          GRPC_MESSAGE_COMPRESS_GZIP,
+                                      &input, &output) != 1) {
                 grpc_slice_buffer_destroy(&input);
                 grpc_slice_buffer_destroy(&output);
 

2018-10-27 12:33:43,322 - dev: Stanley Cheung, comments []
2018-10-27 12:33:43,336 - dev: Processing following file? False, third_party/grpc
2018-10-27 12:33:43,350 - dev: Processing following file? True, net/grpc/gateway/codec/grpc_decoder.cc
2018-10-27 12:33:43,350 - dev: Processing commit 179/433: f701a4c9484ce04f7126d424f59e08f4fbe64117 - diff: @@ -84,9 +84,9 @@ Status GrpcDecoder::Decode() {
               grpc_slice_buffer_add(&input, slice_input);
               grpc_slice_buffer output;
               grpc_slice_buffer_init(&output);
-              if (grpc_msg_decompress(
-                      grpc_compression_algorithm::GRPC_COMPRESS_GZIP, &input,
-                      &output) != 1) {
+              if (grpc_msg_decompress(grpc_message_compression_algorithm::
+                                          GRPC_MESSAGE_COMPRESS_GZIP,
+                                      &input, &output) != 1) {
                 grpc_slice_buffer_destroy(&input);
                 grpc_slice_buffer_destroy(&output);
 

2018-10-27 12:33:43,350 - dev: Stanley Cheung, comments []
2018-10-27 12:33:43,364 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:43,377 - dev: Processing following file? False, README.md
2018-10-27 12:33:43,394 - dev: Processing following file? False, README.md
2018-10-27 12:33:43,407 - dev: Processing following file? False, javascript/net/grpc/web/abstractclientbase.js
2018-10-27 12:33:43,421 - dev: Processing following file? False, javascript/net/grpc/web/abstractclientbase.js
2018-10-27 12:33:43,434 - dev: Processing following file? False, README.md
2018-10-27 12:33:43,448 - dev: Processing following file? False, README.md
2018-10-27 12:33:43,492 - dev: Processing following file? False, .travis.yml
2018-10-27 12:33:43,505 - dev: Processing following file? False, .travis.yml
2018-10-27 12:33:43,518 - dev: Processing following file? False, scripts/darwin_x86_64.sh
2018-10-27 12:33:43,536 - dev: Processing following file? False, scripts/darwin_x86_64.sh
2018-10-27 12:33:43,552 - dev: Processing following file? False, scripts/init_submodules.sh
2018-10-27 12:33:43,566 - dev: Processing following file? False, scripts/init_submodules.sh
2018-10-27 12:33:43,581 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,596 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,610 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,623 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,637 - dev: Processing following file? False, net/grpc/gateway/nginx/grpc_gateway_module.c
2018-10-27 12:33:43,650 - dev: Processing following file? False, scripts/init_submodules.sh
2018-10-27 12:33:43,666 - dev: Processing following file? False, net/grpc/gateway/nginx/grpc_gateway_module.c
2018-10-27 12:33:43,693 - dev: Processing following file? False, net/grpc/gateway/docker/container_build/Dockerfile
2018-10-27 12:33:43,706 - dev: Processing following file? False, net/grpc/gateway/docker/container_build/Dockerfile
2018-10-27 12:33:43,721 - dev: Processing following file? False, net/grpc/gateway/docker/container_build/Dockerfile
2018-10-27 12:33:43,736 - dev: Processing following file? False, net/grpc/gateway/docker/ubuntu_14_04/Dockerfile
2018-10-27 12:33:43,751 - dev: Processing following file? False, net/grpc/gateway/docker/container_build/Dockerfile
2018-10-27 12:33:43,810 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:43,835 - dev: Processing following file? False, javascript/net/grpc/web/Makefile
2018-10-27 12:33:43,850 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,865 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:43,879 - dev: Processing following file? False, net/grpc/gateway/docker/ubuntu_14_04/Dockerfile
2018-10-27 12:33:43,892 - dev: Processing following file? False, scripts/build_examples.sh
2018-10-27 12:33:43,905 - dev: Processing following file? False, net/grpc/gateway/docker/ubuntu_14_04/Dockerfile
2018-10-27 12:33:43,921 - dev: Processing following file? False, net/grpc/gateway/docker/ubuntu_14_04/Dockerfile
2018-10-27 12:33:43,936 - dev: Processing following file? False, scripts/ubuntu_16_04.sh
2018-10-27 12:33:43,949 - dev: Processing following file? False, scripts/ubuntu_16_04.sh
2018-10-27 12:33:43,975 - dev: Processing following file? False, PROTOCOL-WEB.md
2018-10-27 12:33:43,990 - dev: Processing following file? False, PROTOCOL-WEB.md
2018-10-27 12:33:44,017 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,030 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,044 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,059 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,073 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase.js
2018-10-27 12:33:44,087 - dev: Processing following file? False, net/grpc/gateway/examples/echo/nginx.conf
2018-10-27 12:33:44,101 - dev: Processing following file? False, javascript/net/grpc/web/gatewayclientbase.js
2018-10-27 12:33:44,114 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,129 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,142 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,157 - dev: Processing following file? True, net/grpc/gateway/runtime/grpc_event_queue.cc
2018-10-27 12:33:44,157 - dev: Processing commit 234/433: dfb2b08ce3eb289ccecc9731210c2f87b988001b - diff: @@ -26,27 +26,25 @@
 #include "net/grpc/gateway/runtime/tag.h"
 #include "third_party/grpc/include/grpc/grpc.h"
 #include "third_party/grpc/include/grpc/support/time.h"
-#include "third_party/grpc/src/core/lib/gpr/thd.h"
+#include "third_party/grpc/src/core/lib/gprpp/thd.h"
 
 namespace grpc {
 namespace gateway {
 
 GrpcEventQueue::GrpcEventQueue()
-    : queue_(grpc_completion_queue_create_for_next(nullptr)), thread_id_(0) {}
+    : queue_(grpc_completion_queue_create_for_next(nullptr)),
+      thread_("grpc_event_queue", ExecuteEventLoop, this) {}
 
 GrpcEventQueue::~GrpcEventQueue() {}
 
 void GrpcEventQueue::Start() {
-  gpr_thd_options thread_options = gpr_thd_options_default();
-  gpr_thd_options_set_joinable(&thread_options);
-  int ret = gpr_thd_new(&thread_id_, "grpc_event_queue", ExecuteEventLoop, this,
-                        &thread_options);
-  INFO("GRPC event thread started: %d", ret);
+  thread_.Start();
+  INFO("GRPC event thread started");
 }
 
 void GrpcEventQueue::Stop() {
   grpc_completion_queue_shutdown(queue_);
-  gpr_thd_join(thread_id_);
+  thread_.Join();
   grpc_completion_queue_destroy(queue_);
 }
 

2018-10-27 12:33:44,157 - dev: Stanley Cheung, comments [u'"third_party/grpc/src/core/lib/gprpp/thd.h"', u'"grpc_event_queue"', u'"GRPC event thread started"']
2018-10-27 12:33:44,170 - dev: Processing following file? True, net/grpc/gateway/runtime/grpc_event_queue.cc
2018-10-27 12:33:44,171 - dev: Processing commit 235/433: d41667634a249a89e26907d4c249dd0ef09358b7 - diff: @@ -26,27 +26,25 @@
 #include "net/grpc/gateway/runtime/tag.h"
 #include "third_party/grpc/include/grpc/grpc.h"
 #include "third_party/grpc/include/grpc/support/time.h"
-#include "third_party/grpc/src/core/lib/gpr/thd.h"
+#include "third_party/grpc/src/core/lib/gprpp/thd.h"
 
 namespace grpc {
 namespace gateway {
 
 GrpcEventQueue::GrpcEventQueue()
-    : queue_(grpc_completion_queue_create_for_next(nullptr)), thread_id_(0) {}
+    : queue_(grpc_completion_queue_create_for_next(nullptr)),
+      thread_("grpc_event_queue", ExecuteEventLoop, this) {}
 
 GrpcEventQueue::~GrpcEventQueue() {}
 
 void GrpcEventQueue::Start() {
-  gpr_thd_options thread_options = gpr_thd_options_default();
-  gpr_thd_options_set_joinable(&thread_options);
-  int ret = gpr_thd_new(&thread_id_, "grpc_event_queue", ExecuteEventLoop, this,
-                        &thread_options);
-  INFO("GRPC event thread started: %d", ret);
+  thread_.Start();
+  INFO("GRPC event thread started");
 }
 
 void GrpcEventQueue::Stop() {
   grpc_completion_queue_shutdown(queue_);
-  gpr_thd_join(thread_id_);
+  thread_.Join();
   grpc_completion_queue_destroy(queue_);
 }
 

2018-10-27 12:33:44,171 - dev: Stanley Cheung, comments [u'"third_party/grpc/src/core/lib/gprpp/thd.h"', u'"grpc_event_queue"', u'"GRPC event thread started"']
2018-10-27 12:33:44,184 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:44,200 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:44,214 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:44,227 - dev: Processing following file? False, net/grpc/gateway/examples/echo/tutorial.md
2018-10-27 12:33:44,241 - dev: Processing following file? False, net/grpc/gateway/docker/debian_stretch/Dockerfile
2018-10-27 12:33:44,259 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,274 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,288 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,301 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,315 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,330 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,344 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,357 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,370 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,384 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,400 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,414 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,431 - dev: Processing following file? False, javascript/net/grpc/web/abstractclientbase.js
2018-10-27 12:33:44,448 - dev: Processing following file? False, javascript/net/grpc/web/abstractclientbase.js
2018-10-27 12:33:44,463 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,489 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,515 - dev: Processing following file? False, .travis.yml
2018-10-27 12:33:44,530 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,543 - dev: Processing following file? False, .travis.yml
2018-10-27 12:33:44,558 - dev: Processing following file? True, net/grpc/gateway/runtime/nginx_notify_queue.cc
2018-10-27 12:33:44,558 - dev: Processing commit 262/433: 1a9b7e4c4f348f77478c4290fd869417c235e986 - diff: @@ -19,6 +19,7 @@
 #include "net/grpc/gateway/runtime/nginx_notify_queue.h"
 
 #include <algorithm>
+#include <utility>
 
 #include "net/grpc/gateway/log.h"
 

2018-10-27 12:33:44,558 - dev: Stanley Cheung, comments []
2018-10-27 12:33:44,572 - dev: Processing following file? True, net/grpc/gateway/runtime/nginx_notify_queue.cc
2018-10-27 12:33:44,572 - dev: Processing commit 263/433: f0ed9dade409f54c2ed30cbb9cf2c03362a490fc - diff: @@ -19,6 +19,7 @@
 #include "net/grpc/gateway/runtime/nginx_notify_queue.h"
 
 #include <algorithm>
+#include <utility>
 
 #include "net/grpc/gateway/log.h"
 

2018-10-27 12:33:44,572 - dev: Stanley Cheung, comments []
2018-10-27 12:33:44,587 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,603 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,624 - dev: Processing following file? True, net/grpc/gateway/backend/backend.h
2018-10-27 12:33:44,624 - dev: Processing commit 266/433: 404d4896ebac2b6aae39980980cebb3767189bc4 - diff: @@ -23,7 +23,7 @@
 
 #include "net/grpc/gateway/runtime/request.h"
 #include "net/grpc/gateway/runtime/tag.h"
-#include "third_party/grpc/include/grpc++/support/status.h"
+#include "third_party/grpc/include/grpcpp/support/status.h"
 
 namespace grpc {
 namespace gateway {

2018-10-27 12:33:44,624 - dev: Stanley Cheung, comments [u'"third_party/grpc/include/grpcpp/support/status.h"']
2018-10-27 12:33:44,642 - dev: Processing following file? True, net/grpc/gateway/backend/backend.h
2018-10-27 12:33:44,642 - dev: Processing commit 267/433: 729a98de9d5608f2a53ff40fcdeb2283264cccb6 - diff: @@ -23,7 +23,7 @@
 
 #include "net/grpc/gateway/runtime/request.h"
 #include "net/grpc/gateway/runtime/tag.h"
-#include "third_party/grpc/include/grpc++/support/status.h"
+#include "third_party/grpc/include/grpcpp/support/status.h"
 
 namespace grpc {
 namespace gateway {

2018-10-27 12:33:44,643 - dev: Feng Li, comments [u'"third_party/grpc/include/grpcpp/support/status.h"']
2018-10-27 12:33:44,658 - dev: Processing following file? True, net/grpc/gateway/log.h
2018-10-27 12:33:44,658 - dev: Processing commit 268/433: 212cb4abe329626e94d063df1c93db6716ebc51e - diff: @@ -19,8 +19,8 @@
 #ifndef NET_GRPC_GATEWAY_LOG_H_
 #define NET_GRPC_GATEWAY_LOG_H_
 
-#include "third_party/grpc/include/grpc/support/log.h"
 #include <inttypes.h>
+#include "third_party/grpc/include/grpc/support/log.h"
 
 #define INFO_0(f) gpr_log(GPR_INFO, f);
 #define INFO_1(f, v1) gpr_log(GPR_INFO, f, v1);

2018-10-27 12:33:44,659 - dev: Stanley Cheung, comments [u'"third_party/grpc/include/grpc/support/log.h"']
2018-10-27 12:33:44,672 - dev: Processing following file? True, net/grpc/gateway/log.h
2018-10-27 12:33:44,672 - dev: Processing commit 269/433: efdcca10238161b4e0680a0f6c8288b4da296b26 - diff: @@ -19,8 +19,8 @@
 #ifndef NET_GRPC_GATEWAY_LOG_H_
 #define NET_GRPC_GATEWAY_LOG_H_
 
-#include "third_party/grpc/include/grpc/support/log.h"
 #include <inttypes.h>
+#include "third_party/grpc/include/grpc/support/log.h"
 
 #define INFO_0(f) gpr_log(GPR_INFO, f);
 #define INFO_1(f, v1) gpr_log(GPR_INFO, f, v1);

2018-10-27 12:33:44,673 - dev: Stanley Cheung, comments [u'"third_party/grpc/include/grpc/support/log.h"']
2018-10-27 12:33:44,686 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:44,686 - dev: Processing commit 270/433: 626c185282a8e7d8988dfbf06f09f1795f34c272 - diff: @@ -141,7 +141,7 @@ void PrintServiceConstructor(Printer* printer,
       " * @struct\n"
       " * @final\n"
       " */\n"
-      "proto.$package$.$service_name$Client =\n"
+      "proto.$package_dot$$service_name$Client =\n"
       "    function(hostname, credentials, options) {\n"
       "  /**\n"
       "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
@@ -209,7 +209,7 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>|undefined}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package$.$service_name$Client.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\n");
   printer->Indent();
   printer->Print(vars,
                  "  function(request, metadata, callback) {\n"
@@ -219,9 +219,9 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package_dot$$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package_dot$$service_name$/$method_name$',\n");
   }
   printer->Print(
       vars,
@@ -246,7 +246,7 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package$.$service_name$Client.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\n");
   printer->Indent();
   printer->Print(
       "  function(request, metadata) {\n"
@@ -256,9 +256,9 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package_dot$$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package_dot$$service_name$/$method_name$',\n");
   }
   printer->Print(
       vars,
@@ -308,7 +308,10 @@ class GrpcCodeGenerator : public CodeGenerator {
     }
 
     std::map<string, string> vars;
-    vars["package"] = file->package();
+    std::string package = file->package();
+    vars["package"] = package;
+    vars["package_dot"] = package.size() > 0 ? package + '.' : "";
+
     if (mode == "binary") {
       vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
@@ -334,7 +337,7 @@ class GrpcCodeGenerator : public CodeGenerator {
       vars["service_name"] = service->name();
       printer.Print(
           vars,
-          "goog.provide('proto.$package$.$service_name$Client');\n");
+          "goog.provide('proto.$package_dot$$service_name$Client');\n");
     }
     printer.Print("\n");
 

2018-10-27 12:33:44,686 - dev: zaucy, comments [u'"proto.$package_dot$$service_name$Client =\\n"', u'"proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\\n"', u'"\'/$$rpc/$package_dot$$service_name$/$method_name$\',\\n"', u'"\'/$package_dot$$service_name$/$method_name$\',\\n"', u'"proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\\n"', u'"\'/$$rpc/$package_dot$$service_name$/$method_name$\',\\n"', u'"\'/$package_dot$$service_name$/$method_name$\',\\n"', u'"package"', u'"package_dot"', u"'.'", u'""', u'"goog.provide(\'proto.$package_dot$$service_name$Client\');\\n"']
2018-10-27 12:33:44,700 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:44,700 - dev: Processing commit 271/433: e9cdfe0a4de7a1af2f012e6bb1cc06c33b9ed1ab - diff: @@ -141,7 +141,7 @@ void PrintServiceConstructor(Printer* printer,
       " * @struct\n"
       " * @final\n"
       " */\n"
-      "proto.$package$.$service_name$Client =\n"
+      "proto.$package_dot$$service_name$Client =\n"
       "    function(hostname, credentials, options) {\n"
       "  /**\n"
       "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
@@ -209,7 +209,7 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>|undefined}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package$.$service_name$Client.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\n");
   printer->Indent();
   printer->Print(vars,
                  "  function(request, metadata, callback) {\n"
@@ -219,9 +219,9 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package_dot$$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package_dot$$service_name$/$method_name$',\n");
   }
   printer->Print(
       vars,
@@ -246,7 +246,7 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package$.$service_name$Client.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\n");
   printer->Indent();
   printer->Print(
       "  function(request, metadata) {\n"
@@ -256,9 +256,9 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   if (vars["mode"] == GetModeVar(Mode::OP) ||
       vars["mode"] == GetModeVar(Mode::OPJSPB)) {
     printer->Print(vars,
-                   "'/$$rpc/$package$.$service_name$/$method_name$',\n");
+                   "'/$$rpc/$package_dot$$service_name$/$method_name$',\n");
   } else {
-    printer->Print(vars, "'/$package$.$service_name$/$method_name$',\n");
+    printer->Print(vars, "'/$package_dot$$service_name$/$method_name$',\n");
   }
   printer->Print(
       vars,
@@ -308,7 +308,10 @@ class GrpcCodeGenerator : public CodeGenerator {
     }
 
     std::map<string, string> vars;
-    vars["package"] = file->package();
+    std::string package = file->package();
+    vars["package"] = package;
+    vars["package_dot"] = package.size() > 0 ? package + '.' : "";
+
     if (mode == "binary") {
       vars["mode"] = GetModeVar(Mode::OP);
     } else if (mode == "base64") {
@@ -334,7 +337,7 @@ class GrpcCodeGenerator : public CodeGenerator {
       vars["service_name"] = service->name();
       printer.Print(
           vars,
-          "goog.provide('proto.$package$.$service_name$Client');\n");
+          "goog.provide('proto.$package_dot$$service_name$Client');\n");
     }
     printer.Print("\n");
 

2018-10-27 12:33:44,700 - dev: Stanley Cheung, comments [u'"proto.$package_dot$$service_name$Client =\\n"', u'"proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\\n"', u'"\'/$$rpc/$package_dot$$service_name$/$method_name$\',\\n"', u'"\'/$package_dot$$service_name$/$method_name$\',\\n"', u'"proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\\n"', u'"\'/$$rpc/$package_dot$$service_name$/$method_name$\',\\n"', u'"\'/$package_dot$$service_name$/$method_name$\',\\n"', u'"package"', u'"package_dot"', u"'.'", u'""', u'"goog.provide(\'proto.$package_dot$$service_name$Client\');\\n"']
2018-10-27 12:33:44,714 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:44,714 - dev: Processing commit 272/433: fc49d64b215df78a68774fc9acf721fc8c5b7a49 - diff: @@ -308,9 +308,9 @@ class GrpcCodeGenerator : public CodeGenerator {
     }
 
     std::map<string, string> vars;
-    std::string package = file->package();
+    string package = file->package();
     vars["package"] = package;
-    vars["package_dot"] = package.size() > 0 ? package + '.' : "";
+    vars["package_dot"] = package.empty() ? "" : package + '.';
 
     if (mode == "binary") {
       vars["mode"] = GetModeVar(Mode::OP);

2018-10-27 12:33:44,714 - dev: Stanley Cheung, comments [u'"package_dot"', u'""', u"'.'"]
2018-10-27 12:33:44,730 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:44,730 - dev: Processing commit 273/433: e270419446450e7b34cee99aede862832cf909fd - diff: @@ -308,9 +308,9 @@ class GrpcCodeGenerator : public CodeGenerator {
     }
 
     std::map<string, string> vars;
-    std::string package = file->package();
+    string package = file->package();
     vars["package"] = package;
-    vars["package_dot"] = package.size() > 0 ? package + '.' : "";
+    vars["package_dot"] = package.empty() ? "" : package + '.';
 
     if (mode == "binary") {
       vars["mode"] = GetModeVar(Mode::OP);

2018-10-27 12:33:44,730 - dev: Stanley Cheung, comments [u'"package_dot"', u'""', u"'.'"]
2018-10-27 12:33:44,743 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,756 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,769 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,782 - dev: Processing following file? False, PROTOCOL-WEB.md
2018-10-27 12:33:44,796 - dev: Processing following file? False, BROWSER-FEATURES.md
2018-10-27 12:33:44,810 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,823 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,838 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,853 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:44,868 - dev: Processing following file? False, net/grpc/gateway/examples/echo/nginx_simple.conf
2018-10-27 12:33:44,883 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:44,897 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,910 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:44,926 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:44,941 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:44,954 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,967 - dev: Processing following file? False, README.md
2018-10-27 12:33:44,982 - dev: Processing following file? False, Makefile
2018-10-27 12:33:44,997 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,011 - dev: Processing following file? True, net/grpc/gateway/runtime/runtime.cc
2018-10-27 12:33:45,011 - dev: Processing commit 293/433: 3359f0db729b8d11ba9603c34af30f17e9ec14aa - diff: @@ -386,7 +386,7 @@ grpc_channel* Runtime::GetBackendChannel(
         (pem_private_key.empty() || pem_cert_chain.empty())
             ? nullptr
             : &pem_key_cert_pair,
-        nullptr);
+        nullptr, nullptr);
     channel = grpc_secure_channel_create(creds, backend_address.c_str(),
                                          &channel_args, nullptr);
     grpc_channel_credentials_release(creds);

2018-10-27 12:33:45,012 - dev: Stanley Cheung, comments []
2018-10-27 12:33:45,025 - dev: Processing following file? True, net/grpc/gateway/runtime/runtime.cc
2018-10-27 12:33:45,025 - dev: Processing commit 294/433: 98663da2fa4ba180eed4ada173edc0e855ea4f91 - diff: @@ -386,7 +386,7 @@ grpc_channel* Runtime::GetBackendChannel(
         (pem_private_key.empty() || pem_cert_chain.empty())
             ? nullptr
             : &pem_key_cert_pair,
-        nullptr);
+        nullptr, nullptr);
     channel = grpc_secure_channel_create(creds, backend_address.c_str(),
                                          &channel_args, nullptr);
     grpc_channel_credentials_release(creds);

2018-10-27 12:33:45,025 - dev: Stanley Cheung, comments []
2018-10-27 12:33:45,038 - dev: Processing following file? False, BROWSER-FEATURES.md
2018-10-27 12:33:45,054 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:45,070 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:45,110 - dev: Processing following file? False, .gitignore
2018-10-27 12:33:45,125 - dev: Processing following file? False, javascript/net/grpc/web/BUILD.bazel
2018-10-27 12:33:45,140 - dev: Processing following file? False, .gitignore
2018-10-27 12:33:45,182 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:45,182 - dev: Processing commit 305/433: 34450f2b8c427f7c9410a1873a434bf62b83253f - diff: @@ -47,6 +47,11 @@ enum Mode {
   GRPCWEB = 4,     // client using the application/grpc-web wire format
 };
 
+enum ImportStyle {
+  CLOSURE = 0,  // goog.require("grpc.web.*")
+  COMMONJS = 1, // const grpcWeb = require("grpc-web")
+};
+
 string GetModeVar(const Mode mode) {
   switch (mode) {
     case OP:
@@ -120,6 +125,34 @@ void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
   printer->Print("\n\n\n");
 }
 
+void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
+  std::map<string, const Descriptor*> messages = GetAllMessages(file);
+  std::map<string, string> vars;
+  string package = file->package();
+  string filename = file->name();
+  // Remove .proto extension
+  filename = filename.substr(0, filename.size() - 6);
+  vars["package_name"] = package;
+  vars["filename"] = filename;
+
+  printer->Print(vars, "const proto = {};\n");
+  if (!package.empty()) {
+
+    size_t offset = 0;
+    size_t dotIndex = package.find('.');
+
+    while (dotIndex != string::npos) {
+      vars["current_package_ns"] = package.substr(0, dotIndex);
+      printer->Print(vars, "proto.$current_package_ns$ = {};\n");
+
+      offset = dotIndex + 1;
+      dotIndex = package.find(".", offset);
+    }
+  }
+
+  printer->Print(vars, "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+}
+
 void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
@@ -290,16 +323,22 @@ class GrpcCodeGenerator : public CodeGenerator {
 
     string file_name;
     string mode;
-    for (uint i = 0; i < options.size(); ++i) {
+    string import_style_str;
+    ImportStyle import_style;
+  
+    for (size_t i = 0; i < options.size(); ++i) {
       if (options[i].first == "out") {
         file_name = options[i].second;
       } else if (options[i].first == "mode") {
         mode = options[i].second;
+      } else if (options[i].first == "import_style") {
+        import_style_str = options[i].second;
       } else {
         *error = "unsupported options: " + options[i].first;
         return false;
       }
     }
+
     if (file_name.empty()) {
       *error = "options: out is required";
       return false;
@@ -329,6 +368,15 @@ class GrpcCodeGenerator : public CodeGenerator {
       return false;
     }
 
+    if (import_style_str == "closure" || import_style_str.empty()) {
+      import_style = ImportStyle::CLOSURE;
+    } else if (import_style_str == "commonjs") {
+      import_style = ImportStyle::COMMONJS;
+    } else {
+      *error = "options: invalid import_style - " + import_style_str;
+      return false;
+    }
+
     std::unique_ptr<ZeroCopyOutputStream> output(
         context->Open(file_name));
     Printer printer(output.get(), '$');
@@ -337,18 +385,33 @@ class GrpcCodeGenerator : public CodeGenerator {
     for (int i = 0; i < file->service_count(); ++i) {
       const ServiceDescriptor* service = file->service(i);
       vars["service_name"] = service->name();
-      printer.Print(
-          vars,
-          "goog.provide('proto.$package_dot$$service_name$Client');\n");
+      switch (import_style) {
+        case ImportStyle::CLOSURE:
+          printer.Print(
+            vars,
+            "goog.provide('proto.$package_dot$$service_name$Client');\n");
+          break;
+      }
+
     }
     printer.Print("\n");
 
-    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
-    printer.Print(vars, "goog.require('grpc.web.AbstractClientBase');\n");
-    printer.Print(vars, "goog.require('grpc.web.ClientReadableStream');\n");
-    printer.Print(vars, "goog.require('grpc.web.Error');\n");
-    PrintMessagesDeps(&printer, file);
-    printer.Print("goog.scope(function() {\n\n");
+    switch (import_style) {
+      case ImportStyle::CLOSURE:
+        printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
+        printer.Print(vars, "goog.require('grpc.web.AbstractClientBase');\n");
+        printer.Print(vars, "goog.require('grpc.web.ClientReadableStream');\n");
+        printer.Print(vars, "goog.require('grpc.web.Error');\n");
+
+        PrintMessagesDeps(&printer, file);
+        printer.Print("goog.scope(function() {\n\n");
+        break;
+      case ImportStyle::COMMONJS:
+        printer.Print(vars, "const grpc = {};\n");
+        printer.Print(vars, "grpc.web = require('grpc-web');\n\n");
+        PrintCommonJsMessagesDeps(&printer, file);
+        break;
+    }
 
     for (int service_index = 0;
          service_index < file->service_count();
@@ -377,7 +440,15 @@ class GrpcCodeGenerator : public CodeGenerator {
       }
     }
 
-    printer.Print("}); // goog.scope\n\n");
+    switch (import_style) {
+      case ImportStyle::CLOSURE:
+        printer.Print("}); // goog.scope\n\n");
+        break;
+      case ImportStyle::COMMONJS:
+        printer.Print(vars, "module.exports = proto.$package$;\n\n");
+        break;
+    }
+
     return true;
   }
 };

2018-10-27 12:33:45,182 - dev: zaucy, comments [u'// goog.require("grpc.web.*")', u'// const grpcWeb = require("grpc-web")', u'// Remove .proto extension', u'"package_name"', u'"filename"', u'"const proto = {};\\n"', u"'.'", u'"current_package_ns"', u'"proto.$current_package_ns$ = {};\\n"', u'"."', u'"proto.$package_name$ = require(\'./$filename$_pb.js\');\\n\\n"', u'"import_style"', u'"closure"', u'"commonjs"', u'"options: invalid import_style - "', u'"goog.provide(\'proto.$package_dot$$service_name$Client\');\\n"', u'"goog.require(\'grpc.web.$mode$ClientBase\');\\n"', u'"goog.require(\'grpc.web.AbstractClientBase\');\\n"', u'"goog.require(\'grpc.web.ClientReadableStream\');\\n"', u'"goog.require(\'grpc.web.Error\');\\n"', u'"goog.scope(function() {\\n\\n"', u'"const grpc = {};\\n"', u'"grpc.web = require(\'grpc-web\');\\n\\n"', u'"}); // goog.scope\\n\\n"', u'"module.exports = proto.$package$;\\n\\n"']
2018-10-27 12:33:45,197 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:45,197 - dev: Processing commit 306/433: 81e7f74c04ddbb97877c906b6722bc44896a1d50 - diff: @@ -47,6 +47,11 @@ enum Mode {
   GRPCWEB = 4,     // client using the application/grpc-web wire format
 };
 
+enum ImportStyle {
+  CLOSURE = 0,  // goog.require("grpc.web.*")
+  COMMONJS = 1, // const grpcWeb = require("grpc-web")
+};
+
 string GetModeVar(const Mode mode) {
   switch (mode) {
     case OP:
@@ -120,6 +125,34 @@ void PrintMessagesDeps(Printer* printer, const FileDescriptor* file) {
   printer->Print("\n\n\n");
 }
 
+void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
+  std::map<string, const Descriptor*> messages = GetAllMessages(file);
+  std::map<string, string> vars;
+  string package = file->package();
+  string filename = file->name();
+  // Remove .proto extension
+  filename = filename.substr(0, filename.size() - 6);
+  vars["package_name"] = package;
+  vars["filename"] = filename;
+
+  printer->Print(vars, "const proto = {};\n");
+  if (!package.empty()) {
+
+    size_t offset = 0;
+    size_t dotIndex = package.find('.');
+
+    while (dotIndex != string::npos) {
+      vars["current_package_ns"] = package.substr(0, dotIndex);
+      printer->Print(vars, "proto.$current_package_ns$ = {};\n");
+
+      offset = dotIndex + 1;
+      dotIndex = package.find(".", offset);
+    }
+  }
+
+  printer->Print(vars, "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+}
+
 void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
@@ -290,16 +323,22 @@ class GrpcCodeGenerator : public CodeGenerator {
 
     string file_name;
     string mode;
-    for (uint i = 0; i < options.size(); ++i) {
+    string import_style_str;
+    ImportStyle import_style;
+  
+    for (size_t i = 0; i < options.size(); ++i) {
       if (options[i].first == "out") {
         file_name = options[i].second;
       } else if (options[i].first == "mode") {
         mode = options[i].second;
+      } else if (options[i].first == "import_style") {
+        import_style_str = options[i].second;
       } else {
         *error = "unsupported options: " + options[i].first;
         return false;
       }
     }
+
     if (file_name.empty()) {
       *error = "options: out is required";
       return false;
@@ -329,6 +368,15 @@ class GrpcCodeGenerator : public CodeGenerator {
       return false;
     }
 
+    if (import_style_str == "closure" || import_style_str.empty()) {
+      import_style = ImportStyle::CLOSURE;
+    } else if (import_style_str == "commonjs") {
+      import_style = ImportStyle::COMMONJS;
+    } else {
+      *error = "options: invalid import_style - " + import_style_str;
+      return false;
+    }
+
     std::unique_ptr<ZeroCopyOutputStream> output(
         context->Open(file_name));
     Printer printer(output.get(), '$');
@@ -337,18 +385,33 @@ class GrpcCodeGenerator : public CodeGenerator {
     for (int i = 0; i < file->service_count(); ++i) {
       const ServiceDescriptor* service = file->service(i);
       vars["service_name"] = service->name();
-      printer.Print(
-          vars,
-          "goog.provide('proto.$package_dot$$service_name$Client');\n");
+      switch (import_style) {
+        case ImportStyle::CLOSURE:
+          printer.Print(
+            vars,
+            "goog.provide('proto.$package_dot$$service_name$Client');\n");
+          break;
+      }
+
     }
     printer.Print("\n");
 
-    printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
-    printer.Print(vars, "goog.require('grpc.web.AbstractClientBase');\n");
-    printer.Print(vars, "goog.require('grpc.web.ClientReadableStream');\n");
-    printer.Print(vars, "goog.require('grpc.web.Error');\n");
-    PrintMessagesDeps(&printer, file);
-    printer.Print("goog.scope(function() {\n\n");
+    switch (import_style) {
+      case ImportStyle::CLOSURE:
+        printer.Print(vars, "goog.require('grpc.web.$mode$ClientBase');\n");
+        printer.Print(vars, "goog.require('grpc.web.AbstractClientBase');\n");
+        printer.Print(vars, "goog.require('grpc.web.ClientReadableStream');\n");
+        printer.Print(vars, "goog.require('grpc.web.Error');\n");
+
+        PrintMessagesDeps(&printer, file);
+        printer.Print("goog.scope(function() {\n\n");
+        break;
+      case ImportStyle::COMMONJS:
+        printer.Print(vars, "const grpc = {};\n");
+        printer.Print(vars, "grpc.web = require('grpc-web');\n\n");
+        PrintCommonJsMessagesDeps(&printer, file);
+        break;
+    }
 
     for (int service_index = 0;
          service_index < file->service_count();
@@ -377,7 +440,15 @@ class GrpcCodeGenerator : public CodeGenerator {
       }
     }
 
-    printer.Print("}); // goog.scope\n\n");
+    switch (import_style) {
+      case ImportStyle::CLOSURE:
+        printer.Print("}); // goog.scope\n\n");
+        break;
+      case ImportStyle::COMMONJS:
+        printer.Print(vars, "module.exports = proto.$package$;\n\n");
+        break;
+    }
+
     return true;
   }
 };

2018-10-27 12:33:45,198 - dev: Stanley Cheung, comments [u'// goog.require("grpc.web.*")', u'// const grpcWeb = require("grpc-web")', u'// Remove .proto extension', u'"package_name"', u'"filename"', u'"const proto = {};\\n"', u"'.'", u'"current_package_ns"', u'"proto.$current_package_ns$ = {};\\n"', u'"."', u'"proto.$package_name$ = require(\'./$filename$_pb.js\');\\n\\n"', u'"import_style"', u'"closure"', u'"commonjs"', u'"options: invalid import_style - "', u'"goog.provide(\'proto.$package_dot$$service_name$Client\');\\n"', u'"goog.require(\'grpc.web.$mode$ClientBase\');\\n"', u'"goog.require(\'grpc.web.AbstractClientBase\');\\n"', u'"goog.require(\'grpc.web.ClientReadableStream\');\\n"', u'"goog.require(\'grpc.web.Error\');\\n"', u'"goog.scope(function() {\\n\\n"', u'"const grpc = {};\\n"', u'"grpc.web = require(\'grpc-web\');\\n\\n"', u'"}); // goog.scope\\n\\n"', u'"module.exports = proto.$package$;\\n\\n"']
2018-10-27 12:33:45,212 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:45,226 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:45,240 - dev: Processing following file? False, net/grpc/gateway/docker/commonjs_client_example/Dockerfile
2018-10-27 12:33:45,257 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:45,271 - dev: Processing following file? False, net/grpc/gateway/docker/commonjs_client_example/Dockerfile
2018-10-27 12:33:45,285 - dev: Processing following file? False, net/grpc/gateway/docker/commonjs_client_example/Dockerfile
2018-10-27 12:33:45,298 - dev: Processing following file? False, packages/grpc-web/README.md
2018-10-27 12:33:45,311 - dev: Processing following file? False, packages/grpc-web/README.md
2018-10-27 12:33:45,327 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:45,341 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:45,358 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,371 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,384 - dev: Processing following file? False, net/grpc/gateway/docker/grpcwebproxy/Dockerfile
2018-10-27 12:33:45,403 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,417 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client_example/Dockerfile
2018-10-27 12:33:45,431 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,444 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:45,461 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,476 - dev: Processing following file? False, WORKSPACE
2018-10-27 12:33:45,491 - dev: Processing following file? False, WORKSPACE
2018-10-27 12:33:45,506 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:45,506 - dev: Processing commit 327/433: ef435f1a97a89680a749d051bbe56db69e7bb27e - diff: @@ -48,8 +48,8 @@ enum Mode {
 };
 
 enum ImportStyle {
-  CLOSURE = 0,  // goog.require("grpc.web.*")
-  COMMONJS = 1, // const grpcWeb = require("grpc-web")
+  CLOSURE = 0,     // goog.require("grpc.web.*")
+  COMMONJS = 1,    // const grpcWeb = require("grpc-web")
 };
 
 string GetModeVar(const Mode mode) {
@@ -137,7 +137,6 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
 
   printer->Print(vars, "const proto = {};\n");
   if (!package.empty()) {
-
     size_t offset = 0;
     size_t dotIndex = package.find('.');
 
@@ -150,7 +149,9 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
     }
   }
 
-  printer->Print(vars, "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+  printer->Print(
+      vars,
+      "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
 }
 
 void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
@@ -165,7 +166,7 @@ void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
 }
 
 void PrintServiceConstructor(Printer* printer,
-                             std::map<string, string>& vars) {
+                             std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -400,8 +401,9 @@ class GrpcCodeGenerator : public CodeGenerator {
             vars,
             "goog.provide('proto.$package_dot$$service_name$Client');\n");
           break;
+        case ImportStyle::COMMONJS:
+          break;
       }
-
     }
     printer.Print("\n");
 

2018-10-27 12:33:45,506 - dev: Stanley Cheung, comments [u'// goog.require("grpc.web.*")', u'// const grpcWeb = require("grpc-web")', u'"proto.$package_name$ = require(\'./$filename$_pb.js\');\\n\\n"']
2018-10-27 12:33:45,521 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:45,522 - dev: Processing commit 328/433: c6ceed23a9aefd2604db23275d8cd655d23d01e5 - diff: @@ -179,10 +179,7 @@ void PrintServiceConstructor(Printer* printer,
       " */\n"
       "proto.$package_dot$$service_name$Client =\n"
       "    function(hostname, credentials, options) {\n"
-      "  /**\n"
-      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
-      "   */\n"
-      "   if (!options) options = {};\n");
+      "  if (!options) options = {};\n");
   if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
     printer->Print(
         vars,
@@ -190,6 +187,9 @@ void PrintServiceConstructor(Printer* printer,
   }
   printer->Print(
       vars,
+      "  /**\n"
+      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
+      "   */\n"
       "  this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
       "  /**\n"
       "   * @private @const {string} The hostname\n"

2018-10-27 12:33:45,522 - dev: Stanley Cheung, comments [u'"  if (!options) options = {};\\n"', u'"  /**\\n"', u'"   * @private @const {!grpc.web.$mode$ClientBase} The client\\n"', u'"   */\\n"']
2018-10-27 12:33:45,538 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:45,538 - dev: Processing commit 329/433: e64e65626850ba263ae13fbecced0c2df75915f6 - diff: @@ -48,8 +48,8 @@ enum Mode {
 };
 
 enum ImportStyle {
-  CLOSURE = 0,  // goog.require("grpc.web.*")
-  COMMONJS = 1, // const grpcWeb = require("grpc-web")
+  CLOSURE = 0,     // goog.require("grpc.web.*")
+  COMMONJS = 1,    // const grpcWeb = require("grpc-web")
 };
 
 string GetModeVar(const Mode mode) {
@@ -137,7 +137,6 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
 
   printer->Print(vars, "const proto = {};\n");
   if (!package.empty()) {
-
     size_t offset = 0;
     size_t dotIndex = package.find('.');
 
@@ -150,7 +149,9 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
     }
   }
 
-  printer->Print(vars, "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+  printer->Print(
+      vars,
+      "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
 }
 
 void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
@@ -165,7 +166,7 @@ void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
 }
 
 void PrintServiceConstructor(Printer* printer,
-                             std::map<string, string>& vars) {
+                             std::map<string, string> vars) {
   printer->Print(
       vars,
       "/**\n"
@@ -178,10 +179,7 @@ void PrintServiceConstructor(Printer* printer,
       " */\n"
       "proto.$package_dot$$service_name$Client =\n"
       "    function(hostname, credentials, options) {\n"
-      "  /**\n"
-      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
-      "   */\n"
-      "   if (!options) options = {};\n");
+      "  if (!options) options = {};\n");
   if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
     printer->Print(
         vars,
@@ -189,6 +187,9 @@ void PrintServiceConstructor(Printer* printer,
   }
   printer->Print(
       vars,
+      "  /**\n"
+      "   * @private @const {!grpc.web.$mode$ClientBase} The client\n"
+      "   */\n"
       "  this.client_ = new grpc.web.$mode$ClientBase(options);\n\n"
       "  /**\n"
       "   * @private @const {string} The hostname\n"
@@ -400,8 +401,9 @@ class GrpcCodeGenerator : public CodeGenerator {
             vars,
             "goog.provide('proto.$package_dot$$service_name$Client');\n");
           break;
+        case ImportStyle::COMMONJS:
+          break;
       }
-
     }
     printer.Print("\n");
 

2018-10-27 12:33:45,538 - dev: Stanley Cheung, comments [u'// goog.require("grpc.web.*")', u'// const grpcWeb = require("grpc-web")', u'"proto.$package_name$ = require(\'./$filename$_pb.js\');\\n\\n"', u'"  if (!options) options = {};\\n"', u'"  /**\\n"', u'"   * @private @const {!grpc.web.$mode$ClientBase} The client\\n"', u'"   */\\n"']
2018-10-27 12:33:45,552 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,566 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,579 - dev: Processing following file? False, CONTRIBUTING.md
2018-10-27 12:33:45,595 - dev: Processing following file? False, scripts/kokoro.sh
2018-10-27 12:33:45,609 - dev: Processing following file? False, CONTRIBUTING.md
2018-10-27 12:33:45,623 - dev: Processing following file? False, javascript/net/grpc/web/BUILD.bazel
2018-10-27 12:33:45,637 - dev: Processing following file? False, javascript/net/grpc/web/BUILD.bazel
2018-10-27 12:33:45,651 - dev: Processing following file? False, net/grpc/gateway/docker/nginx/Dockerfile
2018-10-27 12:33:45,667 - dev: Processing following file? False, net/grpc/gateway/docker/nginx/Dockerfile
2018-10-27 12:33:45,682 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,696 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,710 - dev: Processing following file? False, packages/grpc-web/README.md
2018-10-27 12:33:45,727 - dev: Processing following file? False, Makefile
2018-10-27 12:33:45,741 - dev: Processing following file? False, packages/grpc-web/README.md
2018-10-27 12:33:45,755 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,768 - dev: Processing following file? False, packages/grpc-web/package.json
2018-10-27 12:33:45,782 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,797 - dev: Processing following file? False, scripts/kokoro.sh
2018-10-27 12:33:45,810 - dev: Processing following file? False, scripts/kokoro.sh
2018-10-27 12:33:45,824 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,837 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,851 - dev: Processing following file? False, README.md
2018-10-27 12:33:45,867 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:45,893 - dev: Processing following file? False, net/grpc/gateway/examples/echo/Makefile
2018-10-27 12:33:45,907 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:45,923 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientbase.js
2018-10-27 12:33:45,938 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:45,952 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:45,966 - dev: Processing following file? False, bazel/closure_grpc_web_library.bzl
2018-10-27 12:33:45,979 - dev: Processing following file? False, bazel/closure_grpc_web_library.bzl
2018-10-27 12:33:45,995 - dev: Processing following file? False, scripts/kokoro.sh
2018-10-27 12:33:46,008 - dev: Processing following file? False, scripts/kokoro.sh
2018-10-27 12:33:46,023 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,037 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,050 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:46,065 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:46,080 - dev: Processing following file? False, net/grpc/gateway/docker/closure_client/Dockerfile
2018-10-27 12:33:46,093 - dev: Processing following file? False, net/grpc/gateway/docker/closure_client/Dockerfile
2018-10-27 12:33:46,108 - dev: Processing following file? False, Makefile
2018-10-27 12:33:46,126 - dev: Processing following file? False, Makefile
2018-10-27 12:33:46,143 - dev: Processing following file? False, .gitignore
2018-10-27 12:33:46,157 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,158 - dev: Processing commit 372/433: 01d3b6380b8e5611c5207a00a2aabc4021ed43bd - diff: @@ -477,7 +477,7 @@ class GrpcCodeGenerator : public CodeGenerator {
     }
 
     if (file_name.empty()) {
-      file_name = StripProto(file->name()) + "_grpc_pb.js";
+      file_name = StripProto(file->name()) + "_grpc_web_pb.js";
     }
     if (mode.empty()) {
       *error = "options: mode is required";

2018-10-27 12:33:46,158 - dev: Stanley Cheung, comments [u'"_grpc_web_pb.js"']
2018-10-27 12:33:46,174 - dev: Processing following file? False, .gitignore
2018-10-27 12:33:46,219 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:46,232 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:46,246 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,263 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,276 - dev: Processing following file? False, net/grpc/gateway/examples/echo/echoapp.js
2018-10-27 12:33:46,290 - dev: Processing following file? False, net/grpc/gateway/examples/echo/echoapp.js
2018-10-27 12:33:46,308 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:46,328 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:46,342 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,355 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,370 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,385 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,402 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,417 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,431 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,444 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,460 - dev: Processing following file? False, LICENSE
2018-10-27 12:33:46,487 - dev: Processing following file? False, LICENSE
2018-10-27 12:33:46,515 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,515 - dev: Processing commit 396/433: 50917db81774b11722c978bfeb969ab19920d2b7 - diff: @@ -361,11 +361,11 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
     printer->Print(
         "client_: grpcWeb.AbstractClientBase;\n"
         "hostname_: string;\n"
-        "credentials_: any;\n"
-        "options_: any;\n\n"
+        "credentials_: {};\n"
+        "options_: { [s: string]: {}; };\n\n"
         "constructor (hostname: string,\n"
-        "             credentials: any,\n"
-        "             options: any) {\n");
+        "             credentials: {},\n"
+        "             options: { [s: string]: {}; }) {\n");
     printer->Indent();
     printer->Print("if (!options) options = {};\n");
     if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
@@ -390,12 +390,12 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
       vars["deserialize_func_name"] = GetDeserializeMethodName(vars["mode"]);
       if (!method->client_streaming()) {
         printer->Print(vars,
-                       "methodInfo_$method_name$ = "
+                       "methodInfo$method_name$ = "
                        "new grpcWeb.AbstractClientBase.MethodInfo(\n");
         printer->Indent();
         printer->Print(vars,
                        "$output_type$,\n"
-                       "function(request: $input_type$) {\n"
+                       "(request: $input_type$) => {\n"
                        "  return request.$serialize_func_name$();\n"
                        "},\n"
                        "$output_type$.$deserialize_func_name$\n");
@@ -414,7 +414,7 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
                          "  '/$package_dot$$service_name$/$method_name$',\n"
                          "request,\n"
                          "metadata,\n"
-                         "this.methodInfo_$method_name$);\n");
+                         "this.methodInfo$method_name$);\n");
           printer->Outdent();
           printer->Outdent();
           printer->Print("}\n\n");
@@ -433,7 +433,7 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
                          "  '/$package_dot$$service_name$/$method_name$',\n"
                          "request,\n"
                          "metadata,\n"
-                         "this.methodInfo_$method_name$,\n"
+                         "this.methodInfo$method_name$,\n"
                          "callback);\n");
           printer->Outdent();
           printer->Outdent();
@@ -458,8 +458,8 @@ void PrintGrpcWebDtsFile(Printer* printer, const FileDescriptor* file) {
     printer->Indent();
     printer->Print(
         "constructor (hostname: string,\n"
-        "             credentials: any,\n"
-        "             options: any);\n\n");
+        "             credentials: {},\n"
+        "             options: { [s: string]: {}; });\n\n");
     for (int method_index = 0; method_index < service->method_count();
          ++method_index) {
       const MethodDescriptor* method = service->method(method_index);
@@ -529,7 +529,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
           js_field_type = "string";
           break;
         default:
-          js_field_type = "any";
+          js_field_type = "{}";
           break;
       }
       vars["js_field_type"] = js_field_type;
@@ -538,7 +538,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
     }
     printer->Print(vars,
                    "serializeBinary(): Uint8Array;\n"
-                   "static deserializeBinary: (bytes: any) => $class_name$;\n");
+                   "static deserializeBinary: (bytes: {}) => $class_name$;\n");
     printer->Outdent();
     printer->Print("}\n\n");
   }
@@ -548,10 +548,10 @@ void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
-      " * @fileoverview gRPC Web JS generated client stub for $package$\n"
+      " * @fileoverview gRPC-Web generated client stub for $package$\n"
       " * @enhanceable\n"
       " * @public\n"
-      " */\n"
+      " */\n\n"
       "// GENERATED CODE -- DO NOT EDIT!\n\n\n");
 }
 
@@ -597,6 +597,34 @@ void PrintServiceConstructor(Printer* printer,
       "};\n\n\n");
 }
 
+void PrintPromiseServiceConstructor(Printer* printer,
+                                    std::map<string, string> vars) {
+  printer->Print(vars,
+                 "/**\n"
+                 " * @param {string} hostname\n"
+                 " * @param {?Object} credentials\n"
+                 " * @param {?Object} options\n"
+                 " * @constructor\n"
+                 " * @struct\n"
+                 " * @final\n"
+                 " */\n"
+                 "proto.$package_dot$$service_name$PromiseClient =\n"
+                 "    function(hostname, credentials, options) {\n"
+                 "  if (!options) options = {};\n");
+  if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
+    printer->Print(vars, "  options['format'] = '$format$';\n\n");
+  }
+  printer->Print(
+      vars,
+      "  /**\n"
+      "   * @private @const {!proto.$package_dot$$service_name$Client} The "
+      "delegate callback based client\n"
+      "   */\n"
+      "  this.delegateClient_ = new proto.$package_dot$$service_name$Client(\n"
+      "      hostname, credentials, options);\n\n"
+      "};\n\n\n");
+}
+
 void PrintMethodInfo(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
@@ -669,6 +697,32 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print("};\n\n\n");
 }
 
+void PrintPromiseUnaryCall(Printer* printer,
+                           const std::map<string, string>& vars) {
+  printer->Print(vars,
+                 "/**\n"
+                 " * @param {!proto.$in$} request The\n"
+                 " *     request proto\n"
+                 " * @param {!Object<string, string>} metadata User defined\n"
+                 " *     call metadata\n"
+                 " * @return {!Promise<!proto.$out$>}\n"
+                 " *     The XHR Node Readable Stream\n"
+                 " */\n"
+                 "proto.$package_dot$$service_name$PromiseClient.prototype"
+                 ".$js_method_name$ =\n");
+  printer->Indent();
+  printer->Print(vars,
+                 "  function(request, metadata) {\n"
+                 "return new Promise((resolve, reject) => {\n"
+                 "  this.delegateClient_.$js_method_name$(\n"
+                 "    request, metadata, (error, response) => {\n"
+                 "      error ? reject(error) : resolve(response);\n"
+                 "    });\n"
+                 "});\n");
+  printer->Outdent();
+  printer->Print("};\n\n\n");
+}
+
 void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   PrintMethodInfo(printer, vars);
   printer->Print(
@@ -809,6 +863,9 @@ class GrpcCodeGenerator : public CodeGenerator {
           printer.Print(
               vars,
               "goog.provide('proto.$package_dot$$service_name$Client');\n");
+          printer.Print(vars,
+                        "goog.provide('proto.$package_dot$$service_name$"
+                        "PromiseClient');\n");
           break;
         case ImportStyle::COMMONJS:
           break;
@@ -843,6 +900,7 @@ class GrpcCodeGenerator : public CodeGenerator {
       const ServiceDescriptor* service = file->service(service_index);
       vars["service_name"] = service->name();
       PrintServiceConstructor(&printer, vars);
+      PrintPromiseServiceConstructor(&printer, vars);
 
       for (int method_index = 0;
            method_index < service->method_count();
@@ -868,6 +926,7 @@ class GrpcCodeGenerator : public CodeGenerator {
             PrintServerStreamingCall(&printer, vars);
           } else {
             PrintUnaryCall(&printer, vars);
+            PrintPromiseUnaryCall(&printer, vars);
           }
         }
       }

2018-10-27 12:33:46,515 - dev: Stanley Cheung, comments [u'"credentials_: {};\\n"', u'"options_: { [s: string]: {}; };\\n\\n"', u'"             credentials: {},\\n"', u'"             options: { [s: string]: {}; }) {\\n"', u'"methodInfo$method_name$ = "', u'"(request: $input_type$) => {\\n"', u'"this.methodInfo$method_name$);\\n"', u'"this.methodInfo$method_name$,\\n"', u'"             credentials: {},\\n"', u'"             options: { [s: string]: {}; });\\n\\n"', u'"{}"', u'"static deserializeBinary: (bytes: {}) => $class_name$;\\n"', u'" * @fileoverview gRPC-Web generated client stub for $package$\\n"', u'" */\\n\\n"', u'"/**\\n"', u'" * @param {string} hostname\\n"', u'" * @param {?Object} credentials\\n"', u'" * @param {?Object} options\\n"', u'" * @constructor\\n"', u'" * @struct\\n"', u'" * @final\\n"', u'" */\\n"', u'"proto.$package_dot$$service_name$PromiseClient =\\n"', u'"    function(hostname, credentials, options) {\\n"', u'"  if (!options) options = {};\\n"', u'"mode"', u'"  options[\'format\'] = \'$format$\';\\n\\n"', u'"  /**\\n"', u'"   * @private @const {!proto.$package_dot$$service_name$Client} The "', u'"delegate callback based client\\n"', u'"   */\\n"', u'"  this.delegateClient_ = new proto.$package_dot$$service_name$Client(\\n"', u'"      hostname, credentials, options);\\n\\n"', u'"};\\n\\n\\n"', u'"/**\\n"', u'" * @param {!proto.$in$} request The\\n"', u'" *     request proto\\n"', u'" * @param {!Object<string, string>} metadata User defined\\n"', u'" *     call metadata\\n"', u'" * @return {!Promise<!proto.$out$>}\\n"', u'" *     The XHR Node Readable Stream\\n"', u'" */\\n"', u'"proto.$package_dot$$service_name$PromiseClient.prototype"', u'".$js_method_name$ =\\n"', u'"  function(request, metadata) {\\n"', u'"return new Promise((resolve, reject) => {\\n"', u'"  this.delegateClient_.$js_method_name$(\\n"', u'"    request, metadata, (error, response) => {\\n"', u'"      error ? reject(error) : resolve(response);\\n"', u'"    });\\n"', u'"});\\n"', u'"};\\n\\n\\n"', u'"goog.provide(\'proto.$package_dot$$service_name$"', u'"PromiseClient\');\\n"']
2018-10-27 12:33:46,531 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,531 - dev: Processing commit 397/433: 6d4dd417601f1535bb58b642beff21b3412af6ae - diff: @@ -361,11 +361,11 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
     printer->Print(
         "client_: grpcWeb.AbstractClientBase;\n"
         "hostname_: string;\n"
-        "credentials_: any;\n"
-        "options_: any;\n\n"
+        "credentials_: {};\n"
+        "options_: { [s: string]: {}; };\n\n"
         "constructor (hostname: string,\n"
-        "             credentials: any,\n"
-        "             options: any) {\n");
+        "             credentials: {},\n"
+        "             options: { [s: string]: {}; }) {\n");
     printer->Indent();
     printer->Print("if (!options) options = {};\n");
     if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
@@ -390,12 +390,12 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
       vars["deserialize_func_name"] = GetDeserializeMethodName(vars["mode"]);
       if (!method->client_streaming()) {
         printer->Print(vars,
-                       "methodInfo_$method_name$ = "
+                       "methodInfo$method_name$ = "
                        "new grpcWeb.AbstractClientBase.MethodInfo(\n");
         printer->Indent();
         printer->Print(vars,
                        "$output_type$,\n"
-                       "function(request: $input_type$) {\n"
+                       "(request: $input_type$) => {\n"
                        "  return request.$serialize_func_name$();\n"
                        "},\n"
                        "$output_type$.$deserialize_func_name$\n");
@@ -414,7 +414,7 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
                          "  '/$package_dot$$service_name$/$method_name$',\n"
                          "request,\n"
                          "metadata,\n"
-                         "this.methodInfo_$method_name$);\n");
+                         "this.methodInfo$method_name$);\n");
           printer->Outdent();
           printer->Outdent();
           printer->Print("}\n\n");
@@ -433,7 +433,7 @@ void PrintTypescriptFile(Printer* printer, const FileDescriptor* file,
                          "  '/$package_dot$$service_name$/$method_name$',\n"
                          "request,\n"
                          "metadata,\n"
-                         "this.methodInfo_$method_name$,\n"
+                         "this.methodInfo$method_name$,\n"
                          "callback);\n");
           printer->Outdent();
           printer->Outdent();
@@ -458,8 +458,8 @@ void PrintGrpcWebDtsFile(Printer* printer, const FileDescriptor* file) {
     printer->Indent();
     printer->Print(
         "constructor (hostname: string,\n"
-        "             credentials: any,\n"
-        "             options: any);\n\n");
+        "             credentials: {},\n"
+        "             options: { [s: string]: {}; });\n\n");
     for (int method_index = 0; method_index < service->method_count();
          ++method_index) {
       const MethodDescriptor* method = service->method(method_index);
@@ -529,7 +529,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
           js_field_type = "string";
           break;
         default:
-          js_field_type = "any";
+          js_field_type = "{}";
           break;
       }
       vars["js_field_type"] = js_field_type;
@@ -538,7 +538,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
     }
     printer->Print(vars,
                    "serializeBinary(): Uint8Array;\n"
-                   "static deserializeBinary: (bytes: any) => $class_name$;\n");
+                   "static deserializeBinary: (bytes: {}) => $class_name$;\n");
     printer->Outdent();
     printer->Print("}\n\n");
   }
@@ -548,10 +548,10 @@ void PrintFileHeader(Printer* printer, const std::map<string, string>& vars) {
   printer->Print(
       vars,
       "/**\n"
-      " * @fileoverview gRPC Web JS generated client stub for $package$\n"
+      " * @fileoverview gRPC-Web generated client stub for $package$\n"
       " * @enhanceable\n"
       " * @public\n"
-      " */\n"
+      " */\n\n"
       "// GENERATED CODE -- DO NOT EDIT!\n\n\n");
 }
 
@@ -597,6 +597,34 @@ void PrintServiceConstructor(Printer* printer,
       "};\n\n\n");
 }
 
+void PrintPromiseServiceConstructor(Printer* printer,
+                                    std::map<string, string> vars) {
+  printer->Print(vars,
+                 "/**\n"
+                 " * @param {string} hostname\n"
+                 " * @param {?Object} credentials\n"
+                 " * @param {?Object} options\n"
+                 " * @constructor\n"
+                 " * @struct\n"
+                 " * @final\n"
+                 " */\n"
+                 "proto.$package_dot$$service_name$PromiseClient =\n"
+                 "    function(hostname, credentials, options) {\n"
+                 "  if (!options) options = {};\n");
+  if (vars["mode"] == GetModeVar(Mode::GRPCWEB)) {
+    printer->Print(vars, "  options['format'] = '$format$';\n\n");
+  }
+  printer->Print(
+      vars,
+      "  /**\n"
+      "   * @private @const {!proto.$package_dot$$service_name$Client} The "
+      "delegate callback based client\n"
+      "   */\n"
+      "  this.delegateClient_ = new proto.$package_dot$$service_name$Client(\n"
+      "      hostname, credentials, options);\n\n"
+      "};\n\n\n");
+}
+
 void PrintMethodInfo(Printer* printer, std::map<string, string> vars) {
   printer->Print(
       vars,
@@ -669,6 +697,32 @@ void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
   printer->Print("};\n\n\n");
 }
 
+void PrintPromiseUnaryCall(Printer* printer,
+                           const std::map<string, string>& vars) {
+  printer->Print(vars,
+                 "/**\n"
+                 " * @param {!proto.$in$} request The\n"
+                 " *     request proto\n"
+                 " * @param {!Object<string, string>} metadata User defined\n"
+                 " *     call metadata\n"
+                 " * @return {!Promise<!proto.$out$>}\n"
+                 " *     The XHR Node Readable Stream\n"
+                 " */\n"
+                 "proto.$package_dot$$service_name$PromiseClient.prototype"
+                 ".$js_method_name$ =\n");
+  printer->Indent();
+  printer->Print(vars,
+                 "  function(request, metadata) {\n"
+                 "return new Promise((resolve, reject) => {\n"
+                 "  this.delegateClient_.$js_method_name$(\n"
+                 "    request, metadata, (error, response) => {\n"
+                 "      error ? reject(error) : resolve(response);\n"
+                 "    });\n"
+                 "});\n");
+  printer->Outdent();
+  printer->Print("};\n\n\n");
+}
+
 void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
   PrintMethodInfo(printer, vars);
   printer->Print(
@@ -809,6 +863,9 @@ class GrpcCodeGenerator : public CodeGenerator {
           printer.Print(
               vars,
               "goog.provide('proto.$package_dot$$service_name$Client');\n");
+          printer.Print(vars,
+                        "goog.provide('proto.$package_dot$$service_name$"
+                        "PromiseClient');\n");
           break;
         case ImportStyle::COMMONJS:
           break;
@@ -843,6 +900,7 @@ class GrpcCodeGenerator : public CodeGenerator {
       const ServiceDescriptor* service = file->service(service_index);
       vars["service_name"] = service->name();
       PrintServiceConstructor(&printer, vars);
+      PrintPromiseServiceConstructor(&printer, vars);
 
       for (int method_index = 0;
            method_index < service->method_count();
@@ -868,6 +926,7 @@ class GrpcCodeGenerator : public CodeGenerator {
             PrintServerStreamingCall(&printer, vars);
           } else {
             PrintUnaryCall(&printer, vars);
+            PrintPromiseUnaryCall(&printer, vars);
           }
         }
       }

2018-10-27 12:33:46,532 - dev: Stanley Cheung, comments [u'"credentials_: {};\\n"', u'"options_: { [s: string]: {}; };\\n\\n"', u'"             credentials: {},\\n"', u'"             options: { [s: string]: {}; }) {\\n"', u'"methodInfo$method_name$ = "', u'"(request: $input_type$) => {\\n"', u'"this.methodInfo$method_name$);\\n"', u'"this.methodInfo$method_name$,\\n"', u'"             credentials: {},\\n"', u'"             options: { [s: string]: {}; });\\n\\n"', u'"{}"', u'"static deserializeBinary: (bytes: {}) => $class_name$;\\n"', u'" * @fileoverview gRPC-Web generated client stub for $package$\\n"', u'" */\\n\\n"', u'"/**\\n"', u'" * @param {string} hostname\\n"', u'" * @param {?Object} credentials\\n"', u'" * @param {?Object} options\\n"', u'" * @constructor\\n"', u'" * @struct\\n"', u'" * @final\\n"', u'" */\\n"', u'"proto.$package_dot$$service_name$PromiseClient =\\n"', u'"    function(hostname, credentials, options) {\\n"', u'"  if (!options) options = {};\\n"', u'"mode"', u'"  options[\'format\'] = \'$format$\';\\n\\n"', u'"  /**\\n"', u'"   * @private @const {!proto.$package_dot$$service_name$Client} The "', u'"delegate callback based client\\n"', u'"   */\\n"', u'"  this.delegateClient_ = new proto.$package_dot$$service_name$Client(\\n"', u'"      hostname, credentials, options);\\n\\n"', u'"};\\n\\n\\n"', u'"/**\\n"', u'" * @param {!proto.$in$} request The\\n"', u'" *     request proto\\n"', u'" * @param {!Object<string, string>} metadata User defined\\n"', u'" *     call metadata\\n"', u'" * @return {!Promise<!proto.$out$>}\\n"', u'" *     The XHR Node Readable Stream\\n"', u'" */\\n"', u'"proto.$package_dot$$service_name$PromiseClient.prototype"', u'".$js_method_name$ =\\n"', u'"  function(request, metadata) {\\n"', u'"return new Promise((resolve, reject) => {\\n"', u'"  this.delegateClient_.$js_method_name$(\\n"', u'"    request, metadata, (error, response) => {\\n"', u'"      error ? reject(error) : resolve(response);\\n"', u'"    });\\n"', u'"});\\n"', u'"};\\n\\n\\n"', u'"goog.provide(\'proto.$package_dot$$service_name$"', u'"PromiseClient\');\\n"']
2018-10-27 12:33:46,545 - dev: Processing following file? False, packages/grpc-web/package.json
2018-10-27 12:33:46,560 - dev: Processing following file? False, packages/grpc-web/package.json
2018-10-27 12:33:46,573 - dev: Processing following file? False, net/grpc/gateway/examples/echo/ts-example/package.json
2018-10-27 12:33:46,589 - dev: Processing following file? False, net/grpc/gateway/examples/echo/ts-example/package.json
2018-10-27 12:33:46,604 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,604 - dev: Processing commit 402/433: 9877e802661014329cfa57f5383782a3e322889f - diff: @@ -167,7 +167,7 @@ char ToLowerASCII(char c) {
 std::vector<string> ParseLowerUnderscore(const string& input) {
   std::vector<string> words;
   string running = "";
-  for (int i = 0; i < input.size(); i++) {
+  for (size_t i = 0; i < input.size(); i++) {
     if (input[i] == '_') {
       if (!running.empty()) {
         words.push_back(running);
@@ -185,7 +185,7 @@ std::vector<string> ParseLowerUnderscore(const string& input) {
 
 string ToUpperCamel(const std::vector<string>& words) {
   string result;
-  for (int i = 0; i < words.size(); i++) {
+  for (size_t i = 0; i < words.size(); i++) {
     string word = words[i];
     if (word[0] >= 'a' && word[0] <= 'z') {
       word[0] = (word[0] - 'a') + 'A';
@@ -503,7 +503,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
     printer->Print(vars, "export class $class_name$ {\n");
     printer->Indent();
     printer->Print("constructor ();\n");
-    for (size_t i = 0; i < it->second->field_count(); i++) {
+    for (int i = 0; i < it->second->field_count(); i++) {
       vars["js_field_name"] =
           ToUpperCamel(ParseLowerUnderscore(it->second->field(i)->name()));
       string js_field_type = "";

2018-10-27 12:33:46,604 - dev: Stanley Cheung, comments []
2018-10-27 12:33:46,618 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,618 - dev: Processing commit 403/433: 44ded2fdb2c73ffeab41ae2a319a6e2274f57326 - diff: @@ -167,7 +167,7 @@ char ToLowerASCII(char c) {
 std::vector<string> ParseLowerUnderscore(const string& input) {
   std::vector<string> words;
   string running = "";
-  for (int i = 0; i < input.size(); i++) {
+  for (size_t i = 0; i < input.size(); i++) {
     if (input[i] == '_') {
       if (!running.empty()) {
         words.push_back(running);
@@ -185,7 +185,7 @@ std::vector<string> ParseLowerUnderscore(const string& input) {
 
 string ToUpperCamel(const std::vector<string>& words) {
   string result;
-  for (int i = 0; i < words.size(); i++) {
+  for (size_t i = 0; i < words.size(); i++) {
     string word = words[i];
     if (word[0] >= 'a' && word[0] <= 'z') {
       word[0] = (word[0] - 'a') + 'A';
@@ -503,7 +503,7 @@ void PrintProtoDtsFile(Printer* printer, const FileDescriptor* file) {
     printer->Print(vars, "export class $class_name$ {\n");
     printer->Indent();
     printer->Print("constructor ();\n");
-    for (size_t i = 0; i < it->second->field_count(); i++) {
+    for (int i = 0; i < it->second->field_count(); i++) {
       vars["js_field_name"] =
           ToUpperCamel(ParseLowerUnderscore(it->second->field(i)->name()));
       string js_field_type = "";

2018-10-27 12:33:46,618 - dev: Stanley Cheung, comments []
2018-10-27 12:33:46,631 - dev: Processing following file? False, net/grpc/gateway/examples/echo/commonjs-example/package.json
2018-10-27 12:33:46,647 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:46,664 - dev: Processing following file? False, docker-compose.yml
2018-10-27 12:33:46,678 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,691 - dev: Processing following file? False, net/grpc/gateway/docker/binary_client/Dockerfile
2018-10-27 12:33:46,704 - dev: Processing following file? False, bazel/closure_grpc_web_library.bzl
2018-10-27 12:33:46,716 - dev: Processing following file? False, bazel/closure_grpc_web_library.bzl
2018-10-27 12:33:46,730 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,730 - dev: Processing commit 411/433: 7a241cbc7026ad9ec604c8caa3e219a15af19393 - diff: @@ -16,6 +16,7 @@
  *
  */
 
+#include <algorithm>
 #include <google/protobuf/compiler/code_generator.h>
 #include <google/protobuf/compiler/plugin.h>
 #include <google/protobuf/descriptor.h>

2018-10-27 12:33:46,731 - dev: Stanley Cheung, comments []
2018-10-27 12:33:46,744 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,744 - dev: Processing commit 412/433: 86631990e365130d5cfca3aa93613ec1eeef7da4 - diff: @@ -16,6 +16,7 @@
  *
  */
 
+#include <algorithm>
 #include <google/protobuf/compiler/code_generator.h>
 #include <google/protobuf/compiler/plugin.h>
 #include <google/protobuf/descriptor.h>

2018-10-27 12:33:46,744 - dev: Stanley Cheung, comments []
2018-10-27 12:33:46,757 - dev: Processing following file? False, ROADMAP.md
2018-10-27 12:33:46,768 - dev: Processing following file? False, net/grpc/gateway/examples/echo/README.md
2018-10-27 12:33:46,784 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,799 - dev: Processing following file? False, javascript/net/grpc/web/grpcwebclientreadablestream.js
2018-10-27 12:33:46,813 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,827 - dev: Processing following file? False, INSTALL.md
2018-10-27 12:33:46,839 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,840 - dev: Processing commit 419/433: 46df5159970444b90e366ff9a34c95206deb94ee - diff: @@ -658,7 +658,6 @@ void PrintMethodInfo(Printer* printer, std::map<string, string> vars) {
 }
 
 void PrintUnaryCall(Printer* printer, std::map<string, string> vars) {
-  PrintMethodInfo(printer, vars);
   printer->Print(
       vars,
       "/**\n"
@@ -725,7 +724,6 @@ void PrintPromiseUnaryCall(Printer* printer,
 }
 
 void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
-  PrintMethodInfo(printer, vars);
   printer->Print(
       vars,
       "/**\n"
@@ -735,7 +733,7 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package_dot$$service_name$Client.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$$client_type$.prototype.$js_method_name$ =\n");
   printer->Indent();
   printer->Print(
       "  function(request, metadata) {\n"
@@ -923,7 +921,11 @@ class GrpcCodeGenerator : public CodeGenerator {
 
         // Client streaming is not supported yet
         if (!method->client_streaming()) {
+          PrintMethodInfo(&printer, vars);
           if (method->server_streaming()) {
+            vars["client_type"] = "Client";
+            PrintServerStreamingCall(&printer, vars);
+            vars["client_type"] = "PromiseClient";
             PrintServerStreamingCall(&printer, vars);
           } else {
             PrintUnaryCall(&printer, vars);

2018-10-27 12:33:46,840 - dev: Juanjo Diaz, comments [u'"proto.$package_dot$$service_name$$client_type$.prototype.$js_method_name$ =\\n"', u'"client_type"', u'"Client"', u'"client_type"', u'"PromiseClient"']
2018-10-27 12:33:46,855 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,855 - dev: Processing commit 420/433: c727bcc6dfbcfb2b7c682f4f704aa88da56272f4 - diff: @@ -735,9 +735,15 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       " */\n"
       "proto.$package_dot$$service_name$$client_type$.prototype.$js_method_name$ =\n");
   printer->Indent();
-  printer->Print(
-      "  function(request, metadata) {\n"
-      "return this.client_.serverStreaming(this.hostname_ +\n");
+  if (vars["client_type"] == "PromiseClient") {
+    printer->Print(
+        "  function(request, metadata) {\n"
+        "return this.delegateClient_.client_.serverStreaming(this.delegateClient_.hostname_ +\n");
+  } else {
+    printer->Print(
+        "  function(request, metadata) {\n"
+        "return this.client_.serverStreaming(this.hostname_ +\n");    
+  }
   printer->Indent();
   printer->Indent();
   if (vars["mode"] == GetModeVar(Mode::OP) ||

2018-10-27 12:33:46,856 - dev: Mitar, comments [u'"client_type"', u'"PromiseClient"', u'"  function(request, metadata) {\\n"', u'"return this.delegateClient_.client_.serverStreaming(this.delegateClient_.hostname_ +\\n"', u'"  function(request, metadata) {\\n"', u'"return this.client_.serverStreaming(this.hostname_ +\\n"']
2018-10-27 12:33:46,870 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,870 - dev: Processing commit 421/433: a312d85d386f8c71e66e6411dec488133e37d88d - diff: @@ -303,11 +303,12 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
   string package = file->package();
   vars["package_name"] = package;
 
-  printer->Print(vars, "const proto = {};\n");
   if (!package.empty()) {
     size_t offset = 0;
     size_t dotIndex = package.find('.');
 
+    printer->Print(vars, "const proto = {};\n");
+
     while (dotIndex != string::npos) {
       vars["current_package_ns"] = package.substr(0, dotIndex);
       printer->Print(vars, "proto.$current_package_ns$ = {};\n");
@@ -325,9 +326,15 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
   }
   vars["filename"] = filename;
 
-  printer->Print(
-      vars,
-      "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+  if (!package.empty()) {
+    printer->Print(
+        vars,
+        "proto.$package_name$ = require('./$filename$_pb.js');\n\n");
+  } else {
+    printer->Print(
+        vars,
+        "const proto = require('./$filename$_pb.js');\n\n");    
+  }
 }
 
 void PrintES6Imports(Printer* printer, const FileDescriptor* file) {
@@ -946,7 +953,11 @@ class GrpcCodeGenerator : public CodeGenerator {
         printer.Print("}); // goog.scope\n\n");
         break;
       case ImportStyle::COMMONJS:
-        printer.Print(vars, "module.exports = proto.$package$;\n\n");
+        if (!vars["package"].empty()) {
+          printer.Print(vars, "module.exports = proto.$package$;\n\n");        
+        } else {
+          printer.Print(vars, "module.exports = proto;\n\n");
+        }
         break;
       case ImportStyle::TYPESCRIPT:
         break;

2018-10-27 12:33:46,870 - dev: Mitar, comments [u'"const proto = {};\\n"', u'"proto.$package_name$ = require(\'./$filename$_pb.js\');\\n\\n"', u'"const proto = require(\'./$filename$_pb.js\');\\n\\n"', u'"package"', u'"module.exports = proto.$package$;\\n\\n"', u'"module.exports = proto;\\n\\n"']
2018-10-27 12:33:46,883 - dev: Processing following file? False, net/grpc/gateway/examples/helloworld/README.md
2018-10-27 12:33:46,897 - dev: Processing following file? False, README.md
2018-10-27 12:33:46,909 - dev: Processing following file? False, packages/grpc-web/test/plugin_test.js
2018-10-27 12:33:46,924 - dev: Processing following file? False, packages/grpc-web/package.json
2018-10-27 12:33:46,937 - dev: Processing following file? False, packages/grpc-web/test/plugin_test.js
2018-10-27 12:33:46,950 - dev: Processing following file? False, packages/grpc-web/test/plugin_test.js
2018-10-27 12:33:46,964 - dev: Processing following file? False, net/grpc/gateway/examples/echo/commonjs-example/package.json
2018-10-27 12:33:46,979 - dev: Processing following file? True, javascript/net/grpc/web/grpc_generator.cc
2018-10-27 12:33:46,979 - dev: Processing commit 429/433: 4ca20a4f9c29359811897ce9b883d09c262bfdf5 - diff: @@ -16,12 +16,12 @@
  *
  */
 
-#include <algorithm>
 #include <google/protobuf/compiler/code_generator.h>
 #include <google/protobuf/compiler/plugin.h>
 #include <google/protobuf/descriptor.h>
 #include <google/protobuf/io/printer.h>
 #include <google/protobuf/io/zero_copy_stream.h>
+#include <algorithm>
 
 using google::protobuf::Descriptor;
 using google::protobuf::FieldDescriptor;
@@ -333,7 +333,7 @@ void PrintCommonJsMessagesDeps(Printer* printer, const FileDescriptor* file) {
   } else {
     printer->Print(
         vars,
-        "const proto = require('./$filename$_pb.js');\n\n");    
+        "const proto = require('./$filename$_pb.js');\n\n");
   }
 }
 
@@ -740,16 +740,18 @@ void PrintServerStreamingCall(Printer* printer, std::map<string, string> vars) {
       " * @return {!grpc.web.ClientReadableStream<!proto.$out$>}\n"
       " *     The XHR Node Readable Stream\n"
       " */\n"
-      "proto.$package_dot$$service_name$$client_type$.prototype.$js_method_name$ =\n");
+      "proto.$package_dot$$service_name$$client_type$.prototype."
+      "$js_method_name$ =\n");
   printer->Indent();
   if (vars["client_type"] == "PromiseClient") {
     printer->Print(
         "  function(request, metadata) {\n"
-        "return this.delegateClient_.client_.serverStreaming(this.delegateClient_.hostname_ +\n");
+        "return this.delegateClient_.client_.serverStreaming("
+        "this.delegateClient_.hostname_ +\n");
   } else {
     printer->Print(
         "  function(request, metadata) {\n"
-        "return this.client_.serverStreaming(this.hostname_ +\n");    
+        "return this.client_.serverStreaming(this.hostname_ +\n");
   }
   printer->Indent();
   printer->Indent();
@@ -954,7 +956,7 @@ class GrpcCodeGenerator : public CodeGenerator {
         break;
       case ImportStyle::COMMONJS:
         if (!vars["package"].empty()) {
-          printer.Print(vars, "module.exports = proto.$package$;\n\n");        
+          printer.Print(vars, "module.exports = proto.$package$;\n\n");
         } else {
           printer.Print(vars, "module.exports = proto;\n\n");
         }

2018-10-27 12:33:46,979 - dev: Stanley Cheung, comments [u'"const proto = require(\'./$filename$_pb.js\');\\n\\n"', u'"proto.$package_dot$$service_name$$client_type$.prototype."', u'"$js_method_name$ =\\n"', u'"return this.delegateClient_.client_.serverStreaming("', u'"this.delegateClient_.hostname_ +\\n"', u'"return this.client_.serverStreaming(this.hostname_ +\\n"', u'"module.exports = proto.$package$;\\n\\n"']
2018-10-27 12:33:46,994 - dev: Processing following file? False, README.md
2018-10-27 12:33:47,008 - dev: Processing following file? False, WORKSPACE
2018-10-27 12:33:47,022 - dev: Processing following file? False, BROWSER-FEATURES.md
2018-10-27 12:33:47,035 - dev: Processing following file? False, README.md
